import { useEffect, useCallback, useRef, useState } from 'react';\nimport { format, addDays, subDays, addWeeks, subWeeks, addMonths, subMonths, isSameDay } from 'date-fns';\n\n/**\n * Custom hook for calendar accessibility features\n */\nexport const useCalendarAccessibility = ({\n  currentDate,\n  setCurrentDate,\n  currentView,\n  setView,\n  selectedDate,\n  setSelectedDate,\n  tasks = [],\n  onTaskSelect,\n  onDateSelect\n}) => {\n  const [focusedDate, setFocusedDate] = useState(selectedDate || currentDate);\n  const [focusedTaskIndex, setFocusedTaskIndex] = useState(-1);\n  const [announcements, setAnnouncements] = useState([]);\n  const [isNavigatingByKeyboard, setIsNavigatingByKeyboard] = useState(false);\n  \n  const calendarRef = useRef(null);\n  const announcementRef = useRef(null);\n  const lastAnnouncementRef = useRef('');\n\n  // Announce changes to screen readers\n  const announce = useCallback((message, priority = 'polite') => {\n    if (message === lastAnnouncementRef.current) return;\n    \n    lastAnnouncementRef.current = message;\n    setAnnouncements(prev => [...prev.slice(-4), { message, priority, id: Date.now() }]);\n    \n    // Clear announcement after delay\n    setTimeout(() => {\n      setAnnouncements(prev => prev.filter(a => a.message !== message));\n    }, 3000);\n  }, []);\n\n  // Get tasks for a specific date\n  const getTasksForDate = useCallback((date) => {\n    return tasks.filter(task => \n      task.due && isSameDay(new Date(task.due), date)\n    );\n  }, [tasks]);\n\n  // Navigate between dates\n  const navigateDate = useCallback((direction) => {\n    let newDate;\n    \n    switch (currentView) {\n      case 'month':\n        switch (direction) {\n          case 'up':\n            newDate = subWeeks(focusedDate, 1);\n            break;\n          case 'down':\n            newDate = addWeeks(focusedDate, 1);\n            break;\n          case 'left':\n            newDate = subDays(focusedDate, 1);\n            break;\n          case 'right':\n            newDate = addDays(focusedDate, 1);\n            break;\n          case 'home':\n            newDate = new Date(focusedDate.getFullYear(), focusedDate.getMonth(), 1);\n            break;\n          case 'end':\n            newDate = new Date(focusedDate.getFullYear(), focusedDate.getMonth() + 1, 0);\n            break;\n          case 'pageUp':\n            newDate = subMonths(focusedDate, 1);\n            break;\n          case 'pageDown':\n            newDate = addMonths(focusedDate, 1);\n            break;\n          default:\n            return;\n        }\n        break;\n        \n      case 'week':\n        switch (direction) {\n          case 'left':\n            newDate = subDays(focusedDate, 1);\n            break;\n          case 'right':\n            newDate = addDays(focusedDate, 1);\n            break;\n          case 'up':\n          case 'pageUp':\n            newDate = subWeeks(focusedDate, 1);\n            break;\n          case 'down':\n          case 'pageDown':\n            newDate = addWeeks(focusedDate, 1);\n            break;\n          case 'home':\n            newDate = subDays(focusedDate, focusedDate.getDay());\n            break;\n          case 'end':\n            newDate = addDays(focusedDate, 6 - focusedDate.getDay());\n            break;\n          default:\n            return;\n        }\n        break;\n        \n      case 'day':\n        switch (direction) {\n          case 'left':\n          case 'up':\n            newDate = subDays(focusedDate, 1);\n            break;\n          case 'right':\n          case 'down':\n            newDate = addDays(focusedDate, 1);\n            break;\n          case 'pageUp':\n            newDate = subWeeks(focusedDate, 1);\n            break;\n          case 'pageDown':\n            newDate = addWeeks(focusedDate, 1);\n            break;\n          default:\n            return;\n        }\n        break;\n        \n      default:\n        return;\n    }\n    \n    setFocusedDate(newDate);\n    setIsNavigatingByKeyboard(true);\n    \n    // Announce the new date\n    const dateTasks = getTasksForDate(newDate);\n    const taskCount = dateTasks.length;\n    const dateString = format(newDate, 'EEEE, MMMM d, yyyy');\n    \n    let announcement = dateString;\n    if (taskCount > 0) {\n      announcement += `, ${taskCount} task${taskCount !== 1 ? 's' : ''}`;\n    } else {\n      announcement += ', no tasks';\n    }\n    \n    announce(announcement);\n  }, [currentView, focusedDate, getTasksForDate, announce]);\n\n  // Navigate between tasks on a date\n  const navigateTask = useCallback((direction) => {\n    const dateTasks = getTasksForDate(focusedDate);\n    if (dateTasks.length === 0) return;\n    \n    let newIndex;\n    \n    switch (direction) {\n      case 'next':\n        newIndex = focusedTaskIndex < dateTasks.length - 1 ? focusedTaskIndex + 1 : 0;\n        break;\n      case 'previous':\n        newIndex = focusedTaskIndex > 0 ? focusedTaskIndex - 1 : dateTasks.length - 1;\n        break;\n      case 'first':\n        newIndex = 0;\n        break;\n      case 'last':\n        newIndex = dateTasks.length - 1;\n        break;\n      default:\n        return;\n    }\n    \n    setFocusedTaskIndex(newIndex);\n    \n    const task = dateTasks[newIndex];\n    const announcement = `Task ${newIndex + 1} of ${dateTasks.length}: ${task.title}, priority ${task.priority}, status ${task.status}`;\n    announce(announcement);\n  }, [focusedDate, focusedTaskIndex, getTasksForDate, announce]);\n\n  // Handle keyboard events\n  const handleKeyDown = useCallback((event) => {\n    const { key, ctrlKey, metaKey, shiftKey, altKey } = event;\n    const modifierPressed = ctrlKey || metaKey;\n    \n    // Prevent default for navigation keys\n    const navigationKeys = [\n      'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight',\n      'Home', 'End', 'PageUp', 'PageDown',\n      'Enter', 'Space', 'Tab'\n    ];\n    \n    if (navigationKeys.includes(key)) {\n      event.preventDefault();\n    }\n    \n    // View switching shortcuts\n    if (modifierPressed) {\n      switch (key) {\n        case '1':\n          setView('month');\n          announce('Switched to month view');\n          return;\n        case '2':\n          setView('week');\n          announce('Switched to week view');\n          return;\n        case '3':\n          setView('day');\n          announce('Switched to day view');\n          return;\n        case '4':\n          setView('agenda');\n          announce('Switched to agenda view');\n          return;\n        case 't':\n          const today = new Date();\n          setCurrentDate(today);\n          setFocusedDate(today);\n          announce(`Navigated to today, ${format(today, 'EEEE, MMMM d, yyyy')}`);\n          return;\n      }\n    }\n    \n    // Date navigation\n    switch (key) {\n      case 'ArrowUp':\n        navigateDate('up');\n        break;\n      case 'ArrowDown':\n        navigateDate('down');\n        break;\n      case 'ArrowLeft':\n        navigateDate('left');\n        break;\n      case 'ArrowRight':\n        navigateDate('right');\n        break;\n      case 'Home':\n        navigateDate('home');\n        break;\n      case 'End':\n        navigateDate('end');\n        break;\n      case 'PageUp':\n        navigateDate('pageUp');\n        break;\n      case 'PageDown':\n        navigateDate('pageDown');\n        break;\n      case 'Enter':\n      case 'Space':\n        if (focusedTaskIndex >= 0) {\n          const dateTasks = getTasksForDate(focusedDate);\n          const task = dateTasks[focusedTaskIndex];\n          if (task && onTaskSelect) {\n            onTaskSelect(task);\n            announce(`Selected task: ${task.title}`);\n          }\n        } else {\n          setSelectedDate(focusedDate);\n          if (onDateSelect) {\n            onDateSelect(focusedDate);\n          }\n          announce(`Selected date: ${format(focusedDate, 'EEEE, MMMM d, yyyy')}`);\n        }\n        break;\n      case 'Tab':\n        if (shiftKey) {\n          navigateTask('previous');\n        } else {\n          navigateTask('next');\n        }\n        break;\n      case 'Escape':\n        setFocusedTaskIndex(-1);\n        announce('Exited task navigation');\n        break;\n    }\n  }, [navigateDate, navigateTask, focusedDate, focusedTaskIndex, getTasksForDate, onTaskSelect, onDateSelect, setView, setCurrentDate, setSelectedDate, announce]);\n\n  // Focus management\n  const focusCalendar = useCallback(() => {\n    if (calendarRef.current) {\n      calendarRef.current.focus();\n    }\n  }, []);\n\n  // Update focused date when selected date changes\n  useEffect(() => {\n    if (selectedDate && !isNavigatingByKeyboard) {\n      setFocusedDate(selectedDate);\n    }\n    setIsNavigatingByKeyboard(false);\n  }, [selectedDate, isNavigatingByKeyboard]);\n\n  // Reset task focus when date changes\n  useEffect(() => {\n    setFocusedTaskIndex(-1);\n  }, [focusedDate]);\n\n  // Announce view changes\n  useEffect(() => {\n    const viewNames = {\n      month: 'Month',\n      week: 'Week', \n      day: 'Day',\n      agenda: 'Agenda'\n    };\n    \n    announce(`Calendar view changed to ${viewNames[currentView] || currentView}`);\n  }, [currentView, announce]);\n\n  // Generate ARIA labels and descriptions\n  const getDateAriaLabel = useCallback((date) => {\n    const dateTasks = getTasksForDate(date);\n    const dateString = format(date, 'EEEE, MMMM d, yyyy');\n    \n    if (dateTasks.length === 0) {\n      return `${dateString}, no tasks`;\n    }\n    \n    const taskSummary = dateTasks.length === 1 \n      ? '1 task'\n      : `${dateTasks.length} tasks`;\n    \n    return `${dateString}, ${taskSummary}`;\n  }, [getTasksForDate]);\n\n  const getTaskAriaLabel = useCallback((task, index, total) => {\n    const dueDate = task.due ? format(new Date(task.due), 'MMMM d, yyyy') : 'no due date';\n    return `Task ${index + 1} of ${total}: ${task.title}, priority ${task.priority}, status ${task.status}, due ${dueDate}`;\n  }, []);\n\n  const getCalendarAriaLabel = useCallback(() => {\n    const viewNames = {\n      month: 'Month',\n      week: 'Week',\n      day: 'Day', \n      agenda: 'Agenda'\n    };\n    \n    return `Calendar ${viewNames[currentView] || currentView} view for ${format(currentDate, 'MMMM yyyy')}`;\n  }, [currentView, currentDate]);\n\n  // Live region for announcements\n  const LiveRegion = () => (\n    <div\n      ref={announcementRef}\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      className=\"sr-only\"\n    >\n      {announcements.map(announcement => (\n        <div key={announcement.id} aria-live={announcement.priority}>\n          {announcement.message}\n        </div>\n      ))}\n    </div>\n  );\n\n  // Skip links for better navigation\n  const SkipLinks = () => (\n    <div className=\"sr-only focus:not-sr-only focus:absolute focus:top-0 focus:left-0 z-50\">\n      <a\n        href=\"#calendar-main\"\n        className=\"bg-primary-600 text-white px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-primary-500\"\n      >\n        Skip to calendar\n      </a>\n      <a\n        href=\"#calendar-controls\"\n        className=\"bg-primary-600 text-white px-4 py-2 rounded focus:outline-none focus:ring-2 focus:ring-primary-500 ml-2\"\n      >\n        Skip to calendar controls\n      </a>\n    </div>\n  );\n\n  // Keyboard shortcuts help\n  const getKeyboardShortcuts = useCallback(() => {\n    return [\n      { key: 'Arrow keys', description: 'Navigate between dates' },\n      { key: 'Tab / Shift+Tab', description: 'Navigate between tasks on selected date' },\n      { key: 'Enter / Space', description: 'Select date or task' },\n      { key: 'Home', description: 'Go to first date of period' },\n      { key: 'End', description: 'Go to last date of period' },\n      { key: 'Page Up/Down', description: 'Navigate to previous/next period' },\n      { key: 'Ctrl/Cmd + 1-4', description: 'Switch calendar views' },\n      { key: 'Ctrl/Cmd + T', description: 'Go to today' },\n      { key: 'Escape', description: 'Exit task navigation' }\n    ];\n  }, []);\n\n  return {\n    // State\n    focusedDate,\n    focusedTaskIndex,\n    isNavigatingByKeyboard,\n    \n    // Event handlers\n    handleKeyDown,\n    focusCalendar,\n    \n    // Navigation functions\n    navigateDate,\n    navigateTask,\n    \n    // ARIA helpers\n    getDateAriaLabel,\n    getTaskAriaLabel,\n    getCalendarAriaLabel,\n    \n    // Announcement system\n    announce,\n    \n    // Components\n    LiveRegion,\n    SkipLinks,\n    \n    // Utilities\n    getKeyboardShortcuts,\n    \n    // Refs\n    calendarRef\n  };\n};\n\n/**\n * Hook for managing focus within calendar components\n */\nexport const useCalendarFocus = () => {\n  const [focusedElement, setFocusedElement] = useState(null);\n  const focusHistory = useRef([]);\n  const trapRef = useRef(null);\n\n  // Focus trap for modals and dialogs\n  const trapFocus = useCallback((containerRef) => {\n    if (!containerRef.current) return;\n\n    const focusableElements = containerRef.current.querySelectorAll(\n      'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n    \n    const firstElement = focusableElements[0];\n    const lastElement = focusableElements[focusableElements.length - 1];\n\n    const handleTabKey = (event) => {\n      if (event.key !== 'Tab') return;\n\n      if (event.shiftKey) {\n        if (document.activeElement === firstElement) {\n          event.preventDefault();\n          lastElement.focus();\n        }\n      } else {\n        if (document.activeElement === lastElement) {\n          event.preventDefault();\n          firstElement.focus();\n        }\n      }\n    };\n\n    containerRef.current.addEventListener('keydown', handleTabKey);\n    firstElement?.focus();\n\n    return () => {\n      containerRef.current?.removeEventListener('keydown', handleTabKey);\n    };\n  }, []);\n\n  // Save and restore focus\n  const saveFocus = useCallback(() => {\n    const activeElement = document.activeElement;\n    if (activeElement && activeElement !== document.body) {\n      focusHistory.current.push(activeElement);\n    }\n  }, []);\n\n  const restoreFocus = useCallback(() => {\n    const lastFocused = focusHistory.current.pop();\n    if (lastFocused && typeof lastFocused.focus === 'function') {\n      lastFocused.focus();\n    }\n  }, []);\n\n  return {\n    focusedElement,\n    setFocusedElement,\n    trapFocus,\n    saveFocus,\n    restoreFocus,\n    trapRef\n  };\n};\n\n/**\n * Hook for high contrast and reduced motion support\n */\nexport const useCalendarAccessibilityPreferences = () => {\n  const [prefersReducedMotion, setPrefersReducedMotion] = useState(false);\n  const [prefersHighContrast, setPrefersHighContrast] = useState(false);\n  const [fontSize, setFontSize] = useState('medium');\n\n  useEffect(() => {\n    // Check for reduced motion preference\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setPrefersReducedMotion(reducedMotionQuery.matches);\n    \n    const handleReducedMotionChange = (e) => setPrefersReducedMotion(e.matches);\n    reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\n\n    // Check for high contrast preference\n    const highContrastQuery = window.matchMedia('(prefers-contrast: high)');\n    setPrefersHighContrast(highContrastQuery.matches);\n    \n    const handleHighContrastChange = (e) => setPrefersHighContrast(e.matches);\n    highContrastQuery.addEventListener('change', handleHighContrastChange);\n\n    return () => {\n      reducedMotionQuery.removeEventListener('change', handleReducedMotionChange);\n      highContrastQuery.removeEventListener('change', handleHighContrastChange);\n    };\n  }, []);\n\n  const getAccessibilityClasses = useCallback(() => {\n    const classes = [];\n    \n    if (prefersReducedMotion) {\n      classes.push('motion-reduce');\n    }\n    \n    if (prefersHighContrast) {\n      classes.push('high-contrast');\n    }\n    \n    classes.push(`font-size-${fontSize}`);\n    \n    return classes.join(' ');\n  }, [prefersReducedMotion, prefersHighContrast, fontSize]);\n\n  return {\n    prefersReducedMotion,\n    prefersHighContrast,\n    fontSize,\n    setFontSize,\n    getAccessibilityClasses\n  };\n};\n\nexport default {\n  useCalendarAccessibility,\n  useCalendarFocus,\n  useCalendarAccessibilityPreferences\n};