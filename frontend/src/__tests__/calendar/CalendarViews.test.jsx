import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { format, addDays, startOfWeek, endOfWeek } from 'date-fns';\n\n// Import components to test\nimport MonthView from '../../components/calendar/views/MonthView';\nimport WeekView from '../../components/calendar/views/WeekView';\nimport DayView from '../../components/calendar/views/DayView';\nimport AgendaView from '../../components/calendar/views/AgendaView';\n\n// Import context\nimport { CalendarProvider } from '../../context/CalendarContext';\n\n// Mock data\nconst mockTasks = [\n  {\n    _id: 'task-1',\n    title: 'Morning Meeting',\n    description: 'Team standup',\n    due: new Date('2024-01-15T09:00:00Z').toISOString(),\n    priority: 'high',\n    status: 'pending',\n    tags: ['work', 'meeting']\n  },\n  {\n    _id: 'task-2',\n    title: 'Lunch Break',\n    description: 'Take a break',\n    due: new Date('2024-01-15T12:00:00Z').toISOString(),\n    priority: 'low',\n    status: 'pending',\n    tags: ['personal']\n  },\n  {\n    _id: 'task-3',\n    title: 'Project Review',\n    description: 'Review project progress',\n    due: new Date('2024-01-16T14:00:00Z').toISOString(),\n    priority: 'medium',\n    status: 'in-progress',\n    tags: ['work', 'review']\n  },\n  {\n    _id: 'task-4',\n    title: 'Completed Task',\n    description: 'Already done',\n    due: new Date('2024-01-14T10:00:00Z').toISOString(),\n    priority: 'medium',\n    status: 'completed',\n    tags: ['work']\n  }\n];\n\nconst mockCalendarContext = {\n  currentDate: new Date('2024-01-15'),\n  setCurrentDate: jest.fn(),\n  currentView: 'month',\n  setView: jest.fn(),\n  selectedDate: null,\n  setSelectedDate: jest.fn(),\n  filteredTasks: mockTasks,\n  allTasks: mockTasks,\n  dateRange: {\n    start: startOfWeek(new Date('2024-01-15')),\n    end: endOfWeek(new Date('2024-01-15'))\n  },\n  isLoading: false,\n  error: null\n};\n\n// Test wrapper\nconst TestWrapper = ({ children, contextValue = mockCalendarContext }) => (\n  <CalendarProvider value={contextValue}>\n    {children}\n  </CalendarProvider>\n);\n\n// Common props for all views\nconst commonProps = {\n  onDateClick: jest.fn(),\n  onTaskClick: jest.fn(),\n  onTaskDrop: jest.fn(),\n  onCreateTask: jest.fn()\n};\n\ndescribe('Calendar View Components', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('MonthView', () => {\n    test('renders month view with calendar grid', () => {\n      render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show month header\n      expect(screen.getByText('January 2024')).toBeInTheDocument();\n      \n      // Should show weekday headers\n      expect(screen.getByText('Sun')).toBeInTheDocument();\n      expect(screen.getByText('Mon')).toBeInTheDocument();\n      expect(screen.getByText('Tue')).toBeInTheDocument();\n      expect(screen.getByText('Wed')).toBeInTheDocument();\n      expect(screen.getByText('Thu')).toBeInTheDocument();\n      expect(screen.getByText('Fri')).toBeInTheDocument();\n      expect(screen.getByText('Sat')).toBeInTheDocument();\n    });\n\n    test('displays tasks on correct dates', () => {\n      render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show tasks on their due dates\n      expect(screen.getByText('Morning Meeting')).toBeInTheDocument();\n      expect(screen.getByText('Lunch Break')).toBeInTheDocument();\n      expect(screen.getByText('Project Review')).toBeInTheDocument();\n    });\n\n    test('handles date cell clicks', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Click on a date cell (day 15)\n      const dateCell = screen.getByText('15');\n      await user.click(dateCell);\n      \n      expect(commonProps.onDateClick).toHaveBeenCalled();\n    });\n\n    test('handles task clicks', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Click on a task\n      const task = screen.getByText('Morning Meeting');\n      await user.click(task);\n      \n      expect(commonProps.onTaskClick).toHaveBeenCalledWith(\n        expect.objectContaining({ title: 'Morning Meeting' }),\n        expect.any(Object)\n      );\n    });\n\n    test('shows today indicator', () => {\n      const todayContext = {\n        ...mockCalendarContext,\n        currentDate: new Date() // Today\n      };\n      \n      render(\n        <TestWrapper contextValue={todayContext}>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should highlight today's date\n      const today = new Date().getDate();\n      const todayCell = screen.getByText(today.toString());\n      expect(todayCell.closest('.date-cell')).toHaveClass('today');\n    });\n\n    test('handles empty task list', () => {\n      const emptyContext = {\n        ...mockCalendarContext,\n        filteredTasks: [],\n        allTasks: []\n      };\n      \n      render(\n        <TestWrapper contextValue={emptyContext}>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should still render calendar grid\n      expect(screen.getByText('January 2024')).toBeInTheDocument();\n      expect(screen.getByText('15')).toBeInTheDocument();\n    });\n\n    test('shows task overflow indicator', () => {\n      const manyTasks = Array.from({ length: 10 }, (_, i) => ({\n        ...mockTasks[0],\n        _id: `task-${i}`,\n        title: `Task ${i}`,\n        due: new Date('2024-01-15T10:00:00Z').toISOString()\n      }));\n      \n      const contextWithManyTasks = {\n        ...mockCalendarContext,\n        filteredTasks: manyTasks,\n        allTasks: manyTasks\n      };\n      \n      render(\n        <TestWrapper contextValue={contextWithManyTasks}>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show overflow indicator\n      expect(screen.getByText(/\\+\\d+ more/)).toBeInTheDocument();\n    });\n  });\n\n  describe('WeekView', () => {\n    test('renders week view with time slots', () => {\n      render(\n        <TestWrapper>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show week range\n      expect(screen.getByText(/Jan \\d+ - \\d+, 2024/)).toBeInTheDocument();\n      \n      // Should show time slots\n      expect(screen.getByText('9:00 AM')).toBeInTheDocument();\n      expect(screen.getByText('12:00 PM')).toBeInTheDocument();\n      expect(screen.getByText('3:00 PM')).toBeInTheDocument();\n    });\n\n    test('displays tasks in correct time slots', () => {\n      render(\n        <TestWrapper>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Tasks should appear in their time slots\n      expect(screen.getByText('Morning Meeting')).toBeInTheDocument();\n      expect(screen.getByText('Lunch Break')).toBeInTheDocument();\n    });\n\n    test('handles time slot clicks', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Click on a time slot\n      const timeSlot = screen.getByText('10:00 AM');\n      await user.click(timeSlot);\n      \n      expect(commonProps.onCreateTask).toHaveBeenCalled();\n    });\n\n    test('shows current time indicator', () => {\n      render(\n        <TestWrapper>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show current time line (if today is in view)\n      const currentTimeIndicator = document.querySelector('.current-time-indicator');\n      if (currentTimeIndicator) {\n        expect(currentTimeIndicator).toBeInTheDocument();\n      }\n    });\n\n    test('handles drag and drop', async () => {\n      render(\n        <TestWrapper>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      const task = screen.getByText('Morning Meeting');\n      const dropZone = screen.getByText('10:00 AM');\n      \n      // Simulate drag and drop\n      fireEvent.dragStart(task);\n      fireEvent.dragOver(dropZone);\n      fireEvent.drop(dropZone);\n      \n      expect(commonProps.onTaskDrop).toHaveBeenCalled();\n    });\n\n    test('shows all-day tasks section', () => {\n      const allDayTask = {\n        ...mockTasks[0],\n        _id: 'all-day-task',\n        title: 'All Day Event',\n        allDay: true\n      };\n      \n      const contextWithAllDay = {\n        ...mockCalendarContext,\n        filteredTasks: [...mockTasks, allDayTask],\n        allTasks: [...mockTasks, allDayTask]\n      };\n      \n      render(\n        <TestWrapper contextValue={contextWithAllDay}>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      expect(screen.getByText('All Day Event')).toBeInTheDocument();\n    });\n  });\n\n  describe('DayView', () => {\n    test('renders day view with hourly breakdown', () => {\n      render(\n        <TestWrapper>\n          <DayView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show current date\n      expect(screen.getByText('Monday, January 15, 2024')).toBeInTheDocument();\n      \n      // Should show hourly time slots\n      expect(screen.getByText('9:00 AM')).toBeInTheDocument();\n      expect(screen.getByText('10:00 AM')).toBeInTheDocument();\n      expect(screen.getByText('11:00 AM')).toBeInTheDocument();\n    });\n\n    test('displays tasks with detailed information', () => {\n      render(\n        <TestWrapper>\n          <DayView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show tasks for the day\n      expect(screen.getByText('Morning Meeting')).toBeInTheDocument();\n      expect(screen.getByText('Lunch Break')).toBeInTheDocument();\n      \n      // Should show task details\n      expect(screen.getByText('Team standup')).toBeInTheDocument();\n    });\n\n    test('handles task overlap visualization', () => {\n      const overlappingTasks = [\n        {\n          ...mockTasks[0],\n          _id: 'task-1',\n          title: 'Task 1',\n          due: new Date('2024-01-15T09:00:00Z').toISOString()\n        },\n        {\n          ...mockTasks[0],\n          _id: 'task-2',\n          title: 'Task 2',\n          due: new Date('2024-01-15T09:30:00Z').toISOString()\n        }\n      ];\n      \n      const contextWithOverlap = {\n        ...mockCalendarContext,\n        filteredTasks: overlappingTasks,\n        allTasks: overlappingTasks\n      };\n      \n      render(\n        <TestWrapper contextValue={contextWithOverlap}>\n          <DayView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Both tasks should be visible\n      expect(screen.getByText('Task 1')).toBeInTheDocument();\n      expect(screen.getByText('Task 2')).toBeInTheDocument();\n    });\n\n    test('shows empty state for day with no tasks', () => {\n      const emptyDayContext = {\n        ...mockCalendarContext,\n        currentDate: new Date('2024-01-20'), // Different day\n        filteredTasks: mockTasks.filter(task => \n          !task.due || !task.due.includes('2024-01-20')\n        )\n      };\n      \n      render(\n        <TestWrapper contextValue={emptyDayContext}>\n          <DayView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      expect(screen.getByText(/no tasks/i)).toBeInTheDocument();\n    });\n\n    test('handles time slot selection', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <DayView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Click on a time slot\n      const timeSlot = screen.getByText('2:00 PM');\n      await user.click(timeSlot);\n      \n      expect(commonProps.onCreateTask).toHaveBeenCalledWith(\n        expect.any(Date),\n        expect.objectContaining({ hour: 14 })\n      );\n    });\n  });\n\n  describe('AgendaView', () => {\n    test('renders agenda view with task list', () => {\n      render(\n        <TestWrapper>\n          <AgendaView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show agenda header\n      expect(screen.getByText('Upcoming Tasks')).toBeInTheDocument();\n      \n      // Should show tasks in chronological order\n      expect(screen.getByText('Morning Meeting')).toBeInTheDocument();\n      expect(screen.getByText('Lunch Break')).toBeInTheDocument();\n      expect(screen.getByText('Project Review')).toBeInTheDocument();\n    });\n\n    test('groups tasks by date', () => {\n      render(\n        <TestWrapper>\n          <DayView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show date groupings\n      expect(screen.getByText('Today')).toBeInTheDocument();\n      expect(screen.getByText('Tomorrow')).toBeInTheDocument();\n    });\n\n    test('shows task status indicators', () => {\n      render(\n        <TestWrapper>\n          <AgendaView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show status indicators\n      const completedTask = screen.getByText('Completed Task');\n      expect(completedTask.closest('.task-item')).toHaveClass('completed');\n    });\n\n    test('handles task status changes', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <AgendaView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Click on task status checkbox\n      const statusCheckbox = screen.getAllByRole('checkbox')[0];\n      await user.click(statusCheckbox);\n      \n      expect(commonProps.onTaskClick).toHaveBeenCalled();\n    });\n\n    test('shows expandable task details', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <AgendaView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Click to expand task details\n      const expandButton = screen.getAllByRole('button', { name: /expand/i })[0];\n      await user.click(expandButton);\n      \n      // Should show task description\n      expect(screen.getByText('Team standup')).toBeInTheDocument();\n    });\n\n    test('filters overdue tasks', () => {\n      const overdueTask = {\n        ...mockTasks[0],\n        _id: 'overdue-task',\n        title: 'Overdue Task',\n        due: new Date('2024-01-10T10:00:00Z').toISOString(),\n        status: 'pending'\n      };\n      \n      const contextWithOverdue = {\n        ...mockCalendarContext,\n        filteredTasks: [...mockTasks, overdueTask],\n        allTasks: [...mockTasks, overdueTask]\n      };\n      \n      render(\n        <TestWrapper contextValue={contextWithOverdue}>\n          <AgendaView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should show overdue section\n      expect(screen.getByText('Overdue')).toBeInTheDocument();\n      expect(screen.getByText('Overdue Task')).toBeInTheDocument();\n    });\n\n    test('shows empty state when no tasks', () => {\n      const emptyContext = {\n        ...mockCalendarContext,\n        filteredTasks: [],\n        allTasks: []\n      };\n      \n      render(\n        <TestWrapper contextValue={emptyContext}>\n          <AgendaView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      expect(screen.getByText(/no upcoming tasks/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Common View Features', () => {\n    test('all views handle loading state', () => {\n      const loadingContext = {\n        ...mockCalendarContext,\n        isLoading: true\n      };\n      \n      const views = [\n        <MonthView {...commonProps} />,\n        <WeekView {...commonProps} />,\n        <DayView {...commonProps} />,\n        <AgendaView {...commonProps} />\n      ];\n      \n      views.forEach(view => {\n        const { unmount } = render(\n          <TestWrapper contextValue={loadingContext}>\n            {view}\n          </TestWrapper>\n        );\n        \n        expect(screen.getByText(/loading/i)).toBeInTheDocument();\n        unmount();\n      });\n    });\n\n    test('all views handle error state', () => {\n      const errorContext = {\n        ...mockCalendarContext,\n        error: 'Failed to load tasks'\n      };\n      \n      const views = [\n        <MonthView {...commonProps} />,\n        <WeekView {...commonProps} />,\n        <DayView {...commonProps} />,\n        <AgendaView {...commonProps} />\n      ];\n      \n      views.forEach(view => {\n        const { unmount } = render(\n          <TestWrapper contextValue={errorContext}>\n            {view}\n          </TestWrapper>\n        );\n        \n        expect(screen.getByText(/failed to load/i)).toBeInTheDocument();\n        unmount();\n      });\n    });\n\n    test('all views support keyboard navigation', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Test arrow key navigation\n      const firstDateCell = screen.getByText('1');\n      firstDateCell.focus();\n      \n      await user.keyboard('{ArrowRight}');\n      expect(document.activeElement).not.toBe(firstDateCell);\n    });\n\n    test('all views support task filtering', () => {\n      const filteredContext = {\n        ...mockCalendarContext,\n        filteredTasks: mockTasks.filter(task => task.priority === 'high')\n      };\n      \n      render(\n        <TestWrapper contextValue={filteredContext}>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should only show high priority tasks\n      expect(screen.getByText('Morning Meeting')).toBeInTheDocument();\n      expect(screen.queryByText('Lunch Break')).not.toBeInTheDocument();\n    });\n  });\n\n  describe('Responsive Behavior', () => {\n    test('views adapt to mobile screen sizes', () => {\n      // Mock mobile screen size\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 600\n      });\n      \n      render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Should apply mobile-specific classes\n      const calendarGrid = document.querySelector('.calendar-grid');\n      expect(calendarGrid).toHaveClass('mobile');\n    });\n\n    test('views handle touch interactions', () => {\n      render(\n        <TestWrapper>\n          <WeekView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      const task = screen.getByText('Morning Meeting');\n      \n      // Simulate touch events\n      fireEvent.touchStart(task);\n      fireEvent.touchEnd(task);\n      \n      expect(commonProps.onTaskClick).toHaveBeenCalled();\n    });\n  });\n\n  describe('Performance', () => {\n    test('views render efficiently with large task sets', () => {\n      const largeTasks = Array.from({ length: 1000 }, (_, i) => ({\n        ...mockTasks[0],\n        _id: `task-${i}`,\n        title: `Task ${i}`,\n        due: addDays(new Date('2024-01-15'), i % 30).toISOString()\n      }));\n      \n      const largeContext = {\n        ...mockCalendarContext,\n        filteredTasks: largeTasks,\n        allTasks: largeTasks\n      };\n      \n      const startTime = performance.now();\n      \n      render(\n        <TestWrapper contextValue={largeContext}>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should render within reasonable time\n      expect(renderTime).toBeLessThan(1000); // 1 second\n    });\n\n    test('views handle rapid view switching', async () => {\n      const user = userEvent.setup();\n      \n      const { rerender } = render(\n        <TestWrapper>\n          <MonthView {...commonProps} />\n        </TestWrapper>\n      );\n      \n      // Rapidly switch between views\n      const views = [\n        <WeekView {...commonProps} />,\n        <DayView {...commonProps} />,\n        <AgendaView {...commonProps} />,\n        <MonthView {...commonProps} />\n      ];\n      \n      for (const view of views) {\n        rerender(\n          <TestWrapper>\n            {view}\n          </TestWrapper>\n        );\n        \n        // Should render without errors\n        expect(document.body).toBeInTheDocument();\n      }\n    });\n  });\n});