import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\n// Import components to test\nimport EnhancedTaskForm from '../../components/task/EnhancedTaskForm';\nimport TaskCard from '../../components/task/TaskCard';\nimport TaskList from '../../components/task/TaskList';\n\n// Import contexts\nimport { CalendarProvider } from '../../context/CalendarContext';\nimport { AuthProvider } from '../../context/AuthContext';\n\n// Mock data\nconst mockTask = {\n  _id: 'task-1',\n  title: 'Test Task',\n  description: 'Test Description',\n  due: new Date('2024-01-15T10:30:00Z').toISOString(),\n  priority: 'high',\n  status: 'pending',\n  tags: ['work', 'urgent'],\n  project: {\n    _id: 'project-1',\n    name: 'Test Project'\n  },\n  assignee: {\n    _id: 'user-1',\n    name: 'John Doe'\n  },\n  createdAt: new Date('2024-01-10T08:00:00Z').toISOString(),\n  updatedAt: new Date('2024-01-12T08:00:00Z').toISOString()\n};\n\nconst mockUser = {\n  _id: 'user-1',\n  name: 'John Doe',\n  email: 'john@example.com'\n};\n\nconst mockCalendarContext = {\n  currentDate: new Date('2024-01-15'),\n  setCurrentDate: jest.fn(),\n  currentView: 'month',\n  setView: jest.fn(),\n  selectedDate: new Date('2024-01-15'),\n  setSelectedDate: jest.fn(),\n  filteredTasks: [mockTask],\n  allTasks: [mockTask],\n  isLoading: false,\n  error: null\n};\n\n// Test wrapper\nconst TestWrapper = ({ children, calendarContext = mockCalendarContext }) => (\n  <AuthProvider value={{ user: mockUser, loading: false }}>\n    <CalendarProvider value={calendarContext}>\n      {children}\n    </CalendarProvider>\n  </AuthProvider>\n);\n\ndescribe('Enhanced Task Component Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('EnhancedTaskForm Calendar Integration', () => {\n    const defaultProps = {\n      onSubmit: jest.fn(),\n      onCancel: jest.fn(),\n      loading: false,\n      calendarContext: true\n    };\n\n    test('detects calendar context and enhances date selection', () => {\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm {...defaultProps} />\n        </TestWrapper>\n      );\n      \n      // Should show enhanced date picker\n      expect(screen.getByLabelText(/due date/i)).toBeInTheDocument();\n      \n      // Should show time picker\n      expect(screen.getByLabelText(/time/i)).toBeInTheDocument();\n      \n      // Should show calendar widget\n      const calendarWidget = document.querySelector('.calendar-widget');\n      expect(calendarWidget).toBeInTheDocument();\n    });\n\n    test('pre-fills date from calendar context', () => {\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm \n            {...defaultProps} \n            preselectedDate={new Date('2024-01-20')}\n            preselectedTime={{ hour: 14, minutes: 30 }}\n          />\n        </TestWrapper>\n      );\n      \n      const dateInput = screen.getByDisplayValue('2024-01-20');\n      const timeInput = screen.getByDisplayValue('14:30');\n      \n      expect(dateInput).toBeInTheDocument();\n      expect(timeInput).toBeInTheDocument();\n    });\n\n    test('integrates with calendar date picker', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm {...defaultProps} />\n        </TestWrapper>\n      );\n      \n      // Click on calendar widget\n      const calendarButton = screen.getByRole('button', { name: /open calendar/i });\n      await user.click(calendarButton);\n      \n      // Should open calendar picker\n      await waitFor(() => {\n        expect(screen.getByRole('dialog')).toBeInTheDocument();\n      });\n    });\n\n    test('validates date and time inputs', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm {...defaultProps} />\n        </TestWrapper>\n      );\n      \n      // Enter invalid date\n      const dateInput = screen.getByLabelText(/due date/i);\n      await user.clear(dateInput);\n      await user.type(dateInput, 'invalid-date');\n      \n      // Try to submit\n      await user.click(screen.getByRole('button', { name: /save/i }));\n      \n      expect(screen.getByText(/invalid date/i)).toBeInTheDocument();\n      expect(defaultProps.onSubmit).not.toHaveBeenCalled();\n    });\n\n    test('handles timezone considerations', () => {\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm \n            {...defaultProps} \n            preselectedDate={new Date('2024-01-15T10:00:00Z')}\n          />\n        </TestWrapper>\n      );\n      \n      // Should display date in local timezone\n      const dateInput = screen.getByLabelText(/due date/i);\n      expect(dateInput.value).toBeTruthy();\n    });\n\n    test('supports recurring task creation from calendar', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm {...defaultProps} />\n        </TestWrapper>\n      );\n      \n      // Enable recurring\n      const recurringCheckbox = screen.getByLabelText(/recurring/i);\n      await user.click(recurringCheckbox);\n      \n      // Should show recurring options\n      expect(screen.getByLabelText(/repeat/i)).toBeInTheDocument();\n    });\n\n    test('handles mobile layout in calendar context', () => {\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm {...defaultProps} mobile={true} />\n        </TestWrapper>\n      );\n      \n      const form = document.querySelector('.task-form');\n      expect(form).toHaveClass('mobile');\n    });\n  });\n\n  describe('TaskCard Calendar Compatibility', () => {\n    const defaultProps = {\n      task: mockTask,\n      onClick: jest.fn(),\n      onEdit: jest.fn(),\n      onDelete: jest.fn(),\n      onStatusChange: jest.fn()\n    };\n\n    test('detects calendar view mode and shows compact display', () => {\n      render(\n        <TestWrapper>\n          <TaskCard {...defaultProps} calendarView={true} />\n        </TestWrapper>\n      );\n      \n      const card = screen.getByText('Test Task').closest('.task-card');\n      expect(card).toHaveClass('compact');\n    });\n\n    test('shows drag handle in calendar mode', () => {\n      render(\n        <TestWrapper>\n          <TaskCard {...defaultProps} calendarView={true} draggable={true} />\n        </TestWrapper>\n      );\n      \n      const dragHandle = document.querySelector('.drag-handle');\n      expect(dragHandle).toBeInTheDocument();\n    });\n\n    test('provides calendar-specific quick actions', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <TaskCard {...defaultProps} calendarView={true} />\n        </TestWrapper>\n      );\n      \n      const card = screen.getByText('Test Task').closest('.task-card');\n      await user.hover(card);\n      \n      // Should show calendar-specific actions\n      await waitFor(() => {\n        expect(screen.getByRole('button', { name: /reschedule/i })).toBeInTheDocument();\n      });\n    });\n\n    test('adapts to different calendar view sizes', () => {\n      const sizes = ['xs', 'sm', 'md', 'lg'];\n      \n      sizes.forEach(size => {\n        const { unmount } = render(\n          <TestWrapper>\n            <TaskCard {...defaultProps} size={size} calendarView={true} />\n          </TestWrapper>\n        );\n        \n        const card = screen.getByText('Test Task').closest('.task-card');\n        expect(card).toHaveClass(size);\n        \n        unmount();\n      });\n    });\n\n    test('shows time information in calendar mode', () => {\n      render(\n        <TestWrapper>\n          <TaskCard {...defaultProps} calendarView={true} showTime={true} />\n        </TestWrapper>\n      );\n      \n      expect(screen.getByText('10:30 AM')).toBeInTheDocument();\n    });\n\n    test('handles calendar-specific status changes', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <TaskCard {...defaultProps} calendarView={true} />\n        </TestWrapper>\n      );\n      \n      const statusButton = screen.getByRole('button', { name: /mark complete/i });\n      await user.click(statusButton);\n      \n      expect(defaultProps.onStatusChange).toHaveBeenCalledWith(\n        mockTask._id,\n        'completed'\n      );\n    });\n  });\n\n  describe('TaskList Calendar Integration', () => {\n    const mockTasks = [\n      mockTask,\n      {\n        ...mockTask,\n        _id: 'task-2',\n        title: 'Task 2',\n        due: new Date('2024-01-16T14:00:00Z').toISOString(),\n        priority: 'medium'\n      },\n      {\n        ...mockTask,\n        _id: 'task-3',\n        title: 'Task 3',\n        due: new Date('2024-01-17T09:00:00Z').toISOString(),\n        priority: 'low'\n      }\n    ];\n\n    const defaultProps = {\n      tasks: mockTasks,\n      onTaskClick: jest.fn(),\n      onTaskEdit: jest.fn(),\n      onTaskDelete: jest.fn(),\n      onTaskStatusChange: jest.fn()\n    };\n\n    test('shows calendar view toggle', () => {\n      render(\n        <TestWrapper>\n          <TaskList {...defaultProps} />\n        </TestWrapper>\n      );\n      \n      const calendarToggle = screen.getByRole('button', { name: /calendar view/i });\n      expect(calendarToggle).toBeInTheDocument();\n    });\n\n    test('groups tasks by date when in calendar mode', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Should show date groupings\n      expect(screen.getByText('Today')).toBeInTheDocument();\n      expect(screen.getByText('Tomorrow')).toBeInTheDocument();\n    });\n\n    test('synchronizes selection with calendar', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Select a task\n      const task = screen.getByText('Test Task');\n      await user.click(task);\n      \n      expect(defaultProps.onTaskClick).toHaveBeenCalledWith(mockTask);\n    });\n\n    test('applies calendar filters', () => {\n      const filteredContext = {\n        ...mockCalendarContext,\n        filteredTasks: mockTasks.filter(task => task.priority === 'high')\n      };\n      \n      render(\n        <TestWrapper calendarContext={filteredContext}>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Should only show high priority tasks\n      expect(screen.getByText('Test Task')).toBeInTheDocument();\n      expect(screen.queryByText('Task 2')).not.toBeInTheDocument();\n      expect(screen.queryByText('Task 3')).not.toBeInTheDocument();\n    });\n\n    test('handles calendar date navigation', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Click on date navigation\n      const nextButton = screen.getByRole('button', { name: /next/i });\n      await user.click(nextButton);\n      \n      // Should update calendar context\n      expect(mockCalendarContext.setCurrentDate).toHaveBeenCalled();\n    });\n\n    test('shows task count per date group', () => {\n      render(\n        <TestWrapper>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Should show task counts\n      expect(screen.getByText(/2 tasks/)).toBeInTheDocument(); // Today + Lunch\n      expect(screen.getByText(/1 task/)).toBeInTheDocument(); // Tomorrow\n    });\n\n    test('supports bulk operations in calendar mode', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <TaskList {...defaultProps} calendarMode={true} selectable={true} />\n        </TestWrapper>\n      );\n      \n      // Select multiple tasks\n      const checkboxes = screen.getAllByRole('checkbox');\n      await user.click(checkboxes[0]);\n      await user.click(checkboxes[1]);\n      \n      // Should show bulk actions\n      expect(screen.getByText(/2 selected/)).toBeInTheDocument();\n      expect(screen.getByRole('button', { name: /bulk actions/i })).toBeInTheDocument();\n    });\n\n    test('maintains scroll position during updates', async () => {\n      const manyTasks = Array.from({ length: 50 }, (_, i) => ({\n        ...mockTask,\n        _id: `task-${i}`,\n        title: `Task ${i}`,\n        due: new Date(`2024-01-${15 + (i % 10)}T10:00:00Z`).toISOString()\n      }));\n      \n      const { rerender } = render(\n        <TestWrapper>\n          <TaskList {...defaultProps} tasks={manyTasks} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      const taskList = document.querySelector('.task-list');\n      \n      // Scroll down\n      fireEvent.scroll(taskList, { target: { scrollTop: 500 } });\n      \n      // Update tasks\n      const updatedTasks = [...manyTasks, {\n        ...mockTask,\n        _id: 'new-task',\n        title: 'New Task'\n      }];\n      \n      rerender(\n        <TestWrapper>\n          <TaskList {...defaultProps} tasks={updatedTasks} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Should maintain scroll position\n      expect(taskList.scrollTop).toBe(500);\n    });\n  });\n\n  describe('Cross-Component Integration', () => {\n    test('task form updates reflect in calendar views', async () => {\n      const user = userEvent.setup();\n      const mockOnSubmit = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <div>\n            <EnhancedTaskForm\n              task={mockTask}\n              onSubmit={mockOnSubmit}\n              onCancel={jest.fn()}\n              calendarContext={true}\n            />\n            <TaskList\n              tasks={[mockTask]}\n              onTaskClick={jest.fn()}\n              calendarMode={true}\n            />\n          </div>\n        </TestWrapper>\n      );\n      \n      // Update task title\n      const titleInput = screen.getByDisplayValue('Test Task');\n      await user.clear(titleInput);\n      await user.type(titleInput, 'Updated Task Title');\n      \n      // Submit form\n      await user.click(screen.getByRole('button', { name: /save/i }));\n      \n      expect(mockOnSubmit).toHaveBeenCalledWith(\n        expect.objectContaining({\n          title: 'Updated Task Title'\n        })\n      );\n    });\n\n    test('task card actions integrate with calendar operations', async () => {\n      const user = userEvent.setup();\n      const mockOnEdit = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <TaskCard\n            task={mockTask}\n            onClick={jest.fn()}\n            onEdit={mockOnEdit}\n            calendarView={true}\n          />\n        </TestWrapper>\n      );\n      \n      const card = screen.getByText('Test Task').closest('.task-card');\n      await user.hover(card);\n      \n      await waitFor(() => {\n        const editButton = screen.getByRole('button', { name: /edit/i });\n        return user.click(editButton);\n      });\n      \n      expect(mockOnEdit).toHaveBeenCalledWith(mockTask);\n    });\n\n    test('task list synchronizes with calendar date changes', () => {\n      const { rerender } = render(\n        <TestWrapper>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Change calendar date\n      const newCalendarContext = {\n        ...mockCalendarContext,\n        currentDate: new Date('2024-01-20'),\n        filteredTasks: mockTasks.filter(task => \n          task.due && task.due.includes('2024-01-20')\n        )\n      };\n      \n      rerender(\n        <TestWrapper calendarContext={newCalendarContext}>\n          <TaskList {...defaultProps} calendarMode={true} />\n        </TestWrapper>\n      );\n      \n      // Should update task list to match new date\n      expect(screen.queryByText('Test Task')).not.toBeInTheDocument();\n    });\n\n    test('drag and drop works between task list and calendar', () => {\n      render(\n        <TestWrapper>\n          <div>\n            <TaskList\n              tasks={[mockTask]}\n              onTaskClick={jest.fn()}\n              calendarMode={true}\n              draggable={true}\n            />\n            <div\n              data-testid=\"calendar-drop-zone\"\n              onDrop={jest.fn()}\n              onDragOver={(e) => e.preventDefault()}\n            >\n              Calendar Drop Zone\n            </div>\n          </div>\n        </TestWrapper>\n      );\n      \n      const taskItem = screen.getByText('Test Task');\n      const dropZone = screen.getByTestId('calendar-drop-zone');\n      \n      // Should be draggable\n      expect(taskItem.closest('[draggable=\"true\"]')).toBeInTheDocument();\n      \n      // Simulate drag\n      fireEvent.dragStart(taskItem);\n      fireEvent.dragOver(dropZone);\n      fireEvent.drop(dropZone);\n      \n      // Should handle drop\n      expect(dropZone).toBeInTheDocument();\n    });\n  });\n\n  describe('State Synchronization', () => {\n    test('task updates propagate to all calendar components', async () => {\n      const user = userEvent.setup();\n      const mockUpdateTask = jest.fn();\n      \n      const updatedContext = {\n        ...mockCalendarContext,\n        updateTask: mockUpdateTask\n      };\n      \n      render(\n        <TestWrapper calendarContext={updatedContext}>\n          <div>\n            <TaskCard\n              task={mockTask}\n              onClick={jest.fn()}\n              onStatusChange={mockUpdateTask}\n              calendarView={true}\n            />\n            <TaskList\n              tasks={[mockTask]}\n              onTaskStatusChange={mockUpdateTask}\n              calendarMode={true}\n            />\n          </div>\n        </TestWrapper>\n      );\n      \n      // Change status in task card\n      const statusButton = screen.getAllByRole('button', { name: /complete/i })[0];\n      await user.click(statusButton);\n      \n      expect(mockUpdateTask).toHaveBeenCalled();\n    });\n\n    test('filter changes affect all integrated components', () => {\n      const filteredContext = {\n        ...mockCalendarContext,\n        filteredTasks: mockTasks.filter(task => task.priority === 'high'),\n        filters: { priority: ['high'] }\n      };\n      \n      render(\n        <TestWrapper calendarContext={filteredContext}>\n          <div>\n            <TaskList\n              tasks={mockTasks}\n              onTaskClick={jest.fn()}\n              calendarMode={true}\n            />\n            <div className=\"task-count\">\n              {filteredContext.filteredTasks.length} tasks\n            </div>\n          </div>\n        </TestWrapper>\n      );\n      \n      // Should show filtered count\n      expect(screen.getByText('1 tasks')).toBeInTheDocument();\n      \n      // Should only show high priority task\n      expect(screen.getByText('Test Task')).toBeInTheDocument();\n    });\n\n    test('date selection synchronizes across components', async () => {\n      const user = userEvent.setup();\n      const mockSetSelectedDate = jest.fn();\n      \n      const syncContext = {\n        ...mockCalendarContext,\n        setSelectedDate: mockSetSelectedDate\n      };\n      \n      render(\n        <TestWrapper calendarContext={syncContext}>\n          <div>\n            <TaskList\n              tasks={mockTasks}\n              onTaskClick={jest.fn()}\n              calendarMode={true}\n            />\n            <button\n              onClick={() => mockSetSelectedDate(new Date('2024-01-20'))}\n            >\n              Select Date\n            </button>\n          </div>\n        </TestWrapper>\n      );\n      \n      await user.click(screen.getByText('Select Date'));\n      \n      expect(mockSetSelectedDate).toHaveBeenCalledWith(new Date('2024-01-20'));\n    });\n  });\n\n  describe('Error Handling', () => {\n    test('components handle missing calendar context gracefully', () => {\n      // Render without calendar context\n      expect(() => {\n        render(\n          <AuthProvider value={{ user: mockUser, loading: false }}>\n            <EnhancedTaskForm\n              onSubmit={jest.fn()}\n              onCancel={jest.fn()}\n              calendarContext={true}\n            />\n          </AuthProvider>\n        );\n      }).not.toThrow();\n    });\n\n    test('components handle malformed task data', () => {\n      const malformedTask = {\n        _id: 'bad-task'\n        // Missing required fields\n      };\n      \n      expect(() => {\n        render(\n          <TestWrapper>\n            <TaskCard\n              task={malformedTask}\n              onClick={jest.fn()}\n              calendarView={true}\n            />\n          </TestWrapper>\n        );\n      }).not.toThrow();\n      \n      // Should show fallback content\n      expect(screen.getByText('Untitled Task')).toBeInTheDocument();\n    });\n\n    test('components handle network errors during operations', async () => {\n      const user = userEvent.setup();\n      const mockOnSubmit = jest.fn().mockRejectedValue(new Error('Network error'));\n      \n      render(\n        <TestWrapper>\n          <EnhancedTaskForm\n            onSubmit={mockOnSubmit}\n            onCancel={jest.fn()}\n            calendarContext={true}\n          />\n        </TestWrapper>\n      );\n      \n      // Fill and submit form\n      await user.type(screen.getByLabelText(/title/i), 'New Task');\n      await user.click(screen.getByRole('button', { name: /save/i }));\n      \n      // Should handle error gracefully\n      await waitFor(() => {\n        expect(screen.getByText(/error/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Performance', () => {\n    test('components handle large task lists efficiently', () => {\n      const largeTasks = Array.from({ length: 1000 }, (_, i) => ({\n        ...mockTask,\n        _id: `task-${i}`,\n        title: `Task ${i}`\n      }));\n      \n      const startTime = performance.now();\n      \n      render(\n        <TestWrapper>\n          <TaskList\n            tasks={largeTasks}\n            onTaskClick={jest.fn()}\n            calendarMode={true}\n          />\n        </TestWrapper>\n      );\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should render efficiently even with many tasks\n      expect(renderTime).toBeLessThan(2000); // 2 seconds\n    });\n\n    test('form validation is performant', async () => {\n      const user = userEvent.setup();\n      render(\n        <TestWrapper>\n          <EnhancedTaskForm\n            onSubmit={jest.fn()}\n            onCancel={jest.fn()}\n            calendarContext={true}\n          />\n        </TestWrapper>\n      );\n      \n      const titleInput = screen.getByLabelText(/title/i);\n      \n      const startTime = performance.now();\n      \n      // Type rapidly to test validation performance\n      await user.type(titleInput, 'A'.repeat(100));\n      \n      const endTime = performance.now();\n      const typingTime = endTime - startTime;\n      \n      // Should handle rapid typing efficiently\n      expect(typingTime).toBeLessThan(1000);\n    });\n  });\n});