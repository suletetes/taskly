import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { BrowserRouter } from 'react-router-dom';\nimport { format, addDays } from 'date-fns';\n\n// Test utilities\nimport { createMockTask } from '../utils/testUtils';\nimport { CalendarProvider } from '../../context/CalendarContext';\n\n// Component\nimport CalendarMobile from '../../components/calendar/CalendarMobile';\n\n// Mock data\nconst mockTasks = [\n  createMockTask({\n    _id: '1',\n    title: 'Mobile Task 1',\n    due: new Date().toISOString(),\n    priority: 'high'\n  }),\n  createMockTask({\n    _id: '2',\n    title: 'Mobile Task 2',\n    due: addDays(new Date(), 1).toISOString(),\n    priority: 'medium'\n  })\n];\n\n// Mock calendar context\nconst mockCalendarContext = {\n  currentDate: new Date(),\n  setCurrentDate: jest.fn(),\n  currentView: 'day',\n  setView: jest.fn(),\n  filteredTasks: mockTasks,\n  selectedDate: null,\n  setSelectedDate: jest.fn()\n};\n\n// Test wrapper\nconst TestWrapper = ({ children }) => {\n  return (\n    <BrowserRouter>\n      <CalendarProvider value={mockCalendarContext}>\n        {children}\n      </CalendarProvider>\n    </BrowserRouter>\n  );\n};\n\n// Helper function\nconst renderMobileCalendar = (props = {}) => {\n  const defaultProps = {\n    onTaskClick: jest.fn(),\n    onTaskCreate: jest.fn(),\n    onTaskUpdate: jest.fn(),\n    onTaskDelete: jest.fn()\n  };\n  \n  return render(\n    <TestWrapper>\n      <CalendarMobile {...defaultProps} {...props} />\n    </TestWrapper>\n  );\n};\n\ndescribe('CalendarMobile', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Rendering', () => {\n    test('renders mobile calendar interface', () => {\n      renderMobileCalendar();\n      \n      expect(screen.getByText('Day')).toBeInTheDocument();\n      expect(screen.getByText('Week')).toBeInTheDocument();\n      expect(screen.getByText('List')).toBeInTheDocument();\n    });\n\n    test('displays current date in header', () => {\n      renderMobileCalendar();\n      \n      const today = format(new Date(), 'MMM d, yyyy');\n      expect(screen.getByText(today)).toBeInTheDocument();\n    });\n\n    test('shows add task button', () => {\n      renderMobileCalendar();\n      \n      expect(screen.getByText('Add Task')).toBeInTheDocument();\n    });\n\n    test('displays navigation arrows', () => {\n      renderMobileCalendar();\n      \n      const prevButton = screen.getByRole('button', { name: /previous/i });\n      const nextButton = screen.getByRole('button', { name: /next/i });\n      \n      expect(prevButton).toBeInTheDocument();\n      expect(nextButton).toBeInTheDocument();\n    });\n  });\n\n  describe('View Switching', () => {\n    test('switches between mobile views', async () => {\n      const user = userEvent.setup();\n      const mockSetView = jest.fn();\n      \n      renderMobileCalendar();\n      \n      // Switch to week view\n      await user.click(screen.getByText('Week'));\n      // Note: In actual implementation, this would call setView\n      \n      // Switch to list view\n      await user.click(screen.getByText('List'));\n      // Note: In actual implementation, this would call setView\n    });\n\n    test('highlights active view', () => {\n      renderMobileCalendar();\n      \n      const dayButton = screen.getByText('Day');\n      expect(dayButton).toHaveClass('bg-white');\n    });\n  });\n\n  describe('Touch Interactions', () => {\n    test('handles touch start event', () => {\n      renderMobileCalendar();\n      \n      const container = screen.getByRole('main') || document.body;\n      \n      fireEvent.touchStart(container, {\n        touches: [{ clientX: 100, clientY: 100 }]\n      });\n      \n      // Should not throw error\n      expect(container).toBeInTheDocument();\n    });\n\n    test('handles swipe gestures for navigation', () => {\n      renderMobileCalendar();\n      \n      const container = screen.getByRole('main') || document.body;\n      \n      // Simulate swipe right (previous)\n      fireEvent.touchStart(container, {\n        touches: [{ clientX: 100, clientY: 100 }]\n      });\n      \n      fireEvent.touchMove(container, {\n        touches: [{ clientX: 200, clientY: 100 }]\n      });\n      \n      fireEvent.touchEnd(container, {\n        changedTouches: [{ clientX: 200, clientY: 100 }]\n      });\n      \n      // Should handle swipe navigation\n      expect(container).toBeInTheDocument();\n    });\n\n    test('ignores vertical swipes', () => {\n      renderMobileCalendar();\n      \n      const container = screen.getByRole('main') || document.body;\n      \n      // Simulate vertical swipe\n      fireEvent.touchStart(container, {\n        touches: [{ clientX: 100, clientY: 100 }]\n      });\n      \n      fireEvent.touchMove(container, {\n        touches: [{ clientX: 100, clientY: 200 }]\n      });\n      \n      fireEvent.touchEnd(container, {\n        changedTouches: [{ clientX: 100, clientY: 200 }]\n      });\n      \n      // Should not trigger navigation\n      expect(container).toBeInTheDocument();\n    });\n  });\n\n  describe('Day View', () => {\n    test('displays tasks for current day', () => {\n      renderMobileCalendar();\n      \n      expect(screen.getByText('Mobile Task 1')).toBeInTheDocument();\n    });\n\n    test('shows empty state when no tasks', () => {\n      const emptyContext = {\n        ...mockCalendarContext,\n        filteredTasks: []\n      };\n      \n      render(\n        <BrowserRouter>\n          <CalendarProvider value={emptyContext}>\n            <CalendarMobile onTaskClick={jest.fn()} />\n          </CalendarProvider>\n        </BrowserRouter>\n      );\n      \n      expect(screen.getByText('No tasks for this day')).toBeInTheDocument();\n    });\n\n    test('shows today indicator for current date', () => {\n      renderMobileCalendar();\n      \n      expect(screen.getByText('Today')).toBeInTheDocument();\n    });\n  });\n\n  describe('Week View', () => {\n    test('displays week grid when in week view', () => {\n      const weekContext = {\n        ...mockCalendarContext,\n        currentView: 'week'\n      };\n      \n      render(\n        <BrowserRouter>\n          <CalendarProvider value={weekContext}>\n            <CalendarMobile onTaskClick={jest.fn()} />\n          </CalendarProvider>\n        </BrowserRouter>\n      );\n      \n      // Should show days of the week\n      expect(screen.getByText(/Mon|Tue|Wed|Thu|Fri|Sat|Sun/)).toBeInTheDocument();\n    });\n\n    test('allows navigation to day view from week', async () => {\n      const user = userEvent.setup();\n      const mockSetView = jest.fn();\n      \n      const weekContext = {\n        ...mockCalendarContext,\n        currentView: 'week',\n        setView: mockSetView\n      };\n      \n      render(\n        <BrowserRouter>\n          <CalendarProvider value={weekContext}>\n            <CalendarMobile onTaskClick={jest.fn()} />\n          </CalendarProvider>\n        </BrowserRouter>\n      );\n      \n      // Click on a day in week view\n      const dayButton = screen.getAllByRole('button').find(btn => \n        btn.textContent.match(/^\\d+$/)\n      );\n      \n      if (dayButton) {\n        await user.click(dayButton);\n        // Should navigate to day view\n      }\n    });\n  });\n\n  describe('Agenda/List View', () => {\n    test('displays agenda view with grouped tasks', () => {\n      const agendaContext = {\n        ...mockCalendarContext,\n        currentView: 'agenda'\n      };\n      \n      render(\n        <BrowserRouter>\n          <CalendarProvider value={agendaContext}>\n            <CalendarMobile onTaskClick={jest.fn()} />\n          </CalendarProvider>\n        </BrowserRouter>\n      );\n      \n      expect(screen.getByText('Upcoming Tasks')).toBeInTheDocument();\n    });\n\n    test('groups tasks by date in agenda view', () => {\n      const agendaContext = {\n        ...mockCalendarContext,\n        currentView: 'agenda'\n      };\n      \n      render(\n        <BrowserRouter>\n          <CalendarProvider value={agendaContext}>\n            <CalendarMobile onTaskClick={jest.fn()} />\n          </CalendarProvider>\n        </BrowserRouter>\n      );\n      \n      // Should show task count or grouping\n      expect(screen.getByText(/task/i)).toBeInTheDocument();\n    });\n  });\n\n  describe('Search and Filters', () => {\n    test('toggles search panel', async () => {\n      const user = userEvent.setup();\n      renderMobileCalendar();\n      \n      const searchButton = screen.getByRole('button', { name: /search/i });\n      await user.click(searchButton);\n      \n      // Should show search input\n      await waitFor(() => {\n        expect(screen.getByPlaceholderText(/search/i)).toBeInTheDocument();\n      });\n    });\n\n    test('toggles filter panel', async () => {\n      const user = userEvent.setup();\n      renderMobileCalendar();\n      \n      const filterButton = screen.getByRole('button', { name: /filter/i });\n      await user.click(filterButton);\n      \n      // Should show filters\n      await waitFor(() => {\n        expect(screen.getByText(/priority/i)).toBeInTheDocument();\n      });\n    });\n\n    test('closes search panel when search button is clicked again', async () => {\n      const user = userEvent.setup();\n      renderMobileCalendar();\n      \n      const searchButton = screen.getByRole('button', { name: /search/i });\n      \n      // Open search\n      await user.click(searchButton);\n      await waitFor(() => {\n        expect(screen.getByPlaceholderText(/search/i)).toBeInTheDocument();\n      });\n      \n      // Close search\n      await user.click(searchButton);\n      await waitFor(() => {\n        expect(screen.queryByPlaceholderText(/search/i)).not.toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Task Interactions', () => {\n    test('calls onTaskClick when task is clicked', async () => {\n      const user = userEvent.setup();\n      const mockOnTaskClick = jest.fn();\n      \n      renderMobileCalendar({ onTaskClick: mockOnTaskClick });\n      \n      await user.click(screen.getByText('Mobile Task 1'));\n      \n      expect(mockOnTaskClick).toHaveBeenCalledWith(mockTasks[0]);\n    });\n\n    test('opens quick create modal when add task is clicked', async () => {\n      const user = userEvent.setup();\n      renderMobileCalendar();\n      \n      await user.click(screen.getByText('Add Task'));\n      \n      // Should open quick create modal\n      await waitFor(() => {\n        expect(screen.getByText(/create/i)).toBeInTheDocument();\n      });\n    });\n  });\n\n  describe('Navigation', () => {\n    test('navigates to previous period', async () => {\n      const user = userEvent.setup();\n      const mockSetCurrentDate = jest.fn();\n      \n      renderMobileCalendar();\n      \n      const prevButton = screen.getByRole('button', { name: /previous/i });\n      await user.click(prevButton);\n      \n      // Should call navigation function\n      // Note: In actual implementation, this would update the date\n    });\n\n    test('navigates to next period', async () => {\n      const user = userEvent.setup();\n      const mockSetCurrentDate = jest.fn();\n      \n      renderMobileCalendar();\n      \n      const nextButton = screen.getByRole('button', { name: /next/i });\n      await user.click(nextButton);\n      \n      // Should call navigation function\n      // Note: In actual implementation, this would update the date\n    });\n  });\n\n  describe('Responsive Behavior', () => {\n    test('adapts to different screen orientations', () => {\n      // Mock landscape orientation\n      Object.defineProperty(screen, 'orientation', {\n        writable: true,\n        value: { angle: 90 }\n      });\n      \n      renderMobileCalendar();\n      \n      // Should render without errors in landscape\n      expect(screen.getByText('Day')).toBeInTheDocument();\n    });\n\n    test('handles very small screens', () => {\n      // Mock very small screen\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        value: 320\n      });\n      \n      renderMobileCalendar();\n      \n      // Should still render properly\n      expect(screen.getByText('Day')).toBeInTheDocument();\n    });\n  });\n\n  describe('Accessibility', () => {\n    test('has proper touch targets', () => {\n      renderMobileCalendar();\n      \n      const buttons = screen.getAllByRole('button');\n      \n      // All buttons should be present (touch targets)\n      expect(buttons.length).toBeGreaterThan(0);\n    });\n\n    test('supports screen readers', () => {\n      renderMobileCalendar();\n      \n      // Should have proper ARIA labels\n      expect(screen.getByRole('main')).toBeInTheDocument();\n    });\n\n    test('has proper focus management', async () => {\n      const user = userEvent.setup();\n      renderMobileCalendar();\n      \n      // Should be able to focus elements\n      const firstButton = screen.getAllByRole('button')[0];\n      firstButton.focus();\n      \n      expect(document.activeElement).toBe(firstButton);\n    });\n  });\n\n  describe('Performance', () => {\n    test('renders efficiently with many tasks', () => {\n      const manyTasks = Array.from({ length: 50 }, (_, i) => \n        createMockTask({\n          _id: `task-${i}`,\n          title: `Task ${i}`,\n          due: addDays(new Date(), i % 7).toISOString()\n        })\n      );\n      \n      const contextWithManyTasks = {\n        ...mockCalendarContext,\n        filteredTasks: manyTasks\n      };\n      \n      const startTime = performance.now();\n      \n      render(\n        <BrowserRouter>\n          <CalendarProvider value={contextWithManyTasks}>\n            <CalendarMobile onTaskClick={jest.fn()} />\n          </CalendarProvider>\n        </BrowserRouter>\n      );\n      \n      const endTime = performance.now();\n      const renderTime = endTime - startTime;\n      \n      // Should render within reasonable time\n      expect(renderTime).toBeLessThan(1000);\n    });\n  });\n});