import {\n  generateICalendar,\n  generateCSV,\n  generateJSON,\n  importFromICalendar,\n  importFromCSV\n} from '../../utils/calendarExportUtils';\nimport { format, addDays } from 'date-fns';\n\n// Mock task data\nconst createMockTask = (overrides = {}) => ({\n  _id: 'task-123',\n  title: 'Test Task',\n  description: 'Test Description',\n  due: new Date('2024-01-15T10:00:00Z').toISOString(),\n  priority: 'high',\n  status: 'pending',\n  tags: ['work', 'urgent'],\n  project: {\n    _id: 'project-1',\n    name: 'Test Project'\n  },\n  assignee: {\n    _id: 'user-1',\n    name: 'John Doe',\n    email: 'john@example.com'\n  },\n  createdAt: new Date('2024-01-10T08:00:00Z').toISOString(),\n  ...overrides\n});\n\nconst createRecurringTask = () => createMockTask({\n  _id: 'recurring-task-1',\n  title: 'Recurring Task',\n  recurring: {\n    type: 'daily',\n    interval: 1,\n    endType: 'after',\n    endAfter: 5\n  }\n});\n\ndescribe('Calendar Export Utils', () => {\n  describe('generateICalendar', () => {\n    test('generates valid iCalendar format', () => {\n      const tasks = [createMockTask()];\n      const ical = generateICalendar(tasks);\n      \n      expect(ical).toContain('BEGIN:VCALENDAR');\n      expect(ical).toContain('END:VCALENDAR');\n      expect(ical).toContain('VERSION:2.0');\n      expect(ical).toContain('PRODID:-//Taskly//Taskly Calendar//EN');\n    });\n\n    test('includes task details in iCalendar', () => {\n      const task = createMockTask();\n      const ical = generateICalendar([task]);\n      \n      expect(ical).toContain('BEGIN:VEVENT');\n      expect(ical).toContain('END:VEVENT');\n      expect(ical).toContain(`SUMMARY:${task.title}`);\n      expect(ical).toContain(`DESCRIPTION:${task.description}`);\n      expect(ical).toContain('DTSTART:20240115T100000Z');\n      expect(ical).toContain('STATUS:NEEDS-ACTION');\n      expect(ical).toContain('PRIORITY:1'); // High priority\n    });\n\n    test('includes categories from tags', () => {\n      const task = createMockTask();\n      const ical = generateICalendar([task]);\n      \n      expect(ical).toContain('CATEGORIES:work,urgent');\n    });\n\n    test('handles completed tasks', () => {\n      const task = createMockTask({\n        status: 'completed',\n        completedAt: new Date('2024-01-16T12:00:00Z').toISOString()\n      });\n      const ical = generateICalendar([task]);\n      \n      expect(ical).toContain('STATUS:COMPLETED');\n      expect(ical).toContain('COMPLETED:20240116T120000Z');\n    });\n\n    test('includes recurring rules for recurring tasks', () => {\n      const task = createRecurringTask();\n      const ical = generateICalendar([task], { includeRecurring: true });\n      \n      expect(ical).toContain('RRULE:FREQ=DAILY;COUNT=5');\n    });\n\n    test('excludes recurring rules when disabled', () => {\n      const task = createRecurringTask();\n      const ical = generateICalendar([task], { includeRecurring: false });\n      \n      expect(ical).not.toContain('RRULE:');\n    });\n\n    test('handles tasks without due dates', () => {\n      const task = createMockTask({ due: null });\n      const ical = generateICalendar([task]);\n      \n      // Should not include events without due dates\n      expect(ical).not.toContain('BEGIN:VEVENT');\n    });\n\n    test('escapes special characters in text', () => {\n      const task = createMockTask({\n        title: 'Task with; special, characters\\nand newlines',\n        description: 'Description with; commas, and\\nnewlines'\n      });\n      const ical = generateICalendar([task]);\n      \n      expect(ical).toContain('SUMMARY:Task with\\\\; special\\\\, characters\\\\nand newlines');\n      expect(ical).toContain('DESCRIPTION:Description with\\\\; commas\\\\, and\\\\nnewlines');\n    });\n\n    test('sets custom calendar name', () => {\n      const tasks = [createMockTask()];\n      const ical = generateICalendar(tasks, { calendarName: 'My Custom Calendar' });\n      \n      expect(ical).toContain('X-WR-CALNAME:My Custom Calendar');\n    });\n  });\n\n  describe('generateCSV', () => {\n    test('generates CSV with headers', () => {\n      const tasks = [createMockTask()];\n      const csv = generateCSV(tasks);\n      \n      const lines = csv.split('\\n');\n      const headers = lines[0].split(',');\n      \n      expect(headers).toContain('Title');\n      expect(headers).toContain('Description');\n      expect(headers).toContain('Due Date');\n      expect(headers).toContain('Priority');\n      expect(headers).toContain('Status');\n      expect(headers).toContain('Tags');\n    });\n\n    test('includes task data in CSV rows', () => {\n      const task = createMockTask();\n      const csv = generateCSV([task]);\n      \n      const lines = csv.split('\\n');\n      const dataRow = lines[1];\n      \n      expect(dataRow).toContain(task.title);\n      expect(dataRow).toContain(task.description);\n      expect(dataRow).toContain('2024-01-15');\n      expect(dataRow).toContain('10:00');\n      expect(dataRow).toContain(task.priority);\n      expect(dataRow).toContain(task.status);\n    });\n\n    test('handles tags in CSV format', () => {\n      const task = createMockTask();\n      const csv = generateCSV([task]);\n      \n      expect(csv).toContain('work; urgent');\n    });\n\n    test('escapes CSV fields with commas', () => {\n      const task = createMockTask({\n        title: 'Task with, comma',\n        description: 'Description with, comma and \"quotes\"'\n      });\n      const csv = generateCSV([task]);\n      \n      expect(csv).toContain('\"Task with, comma\"');\n      expect(csv).toContain('\"Description with, comma and \"\"quotes\"\"\"');\n    });\n\n    test('handles missing fields gracefully', () => {\n      const task = {\n        _id: 'minimal-task',\n        title: 'Minimal Task'\n        // Missing other fields\n      };\n      const csv = generateCSV([task]);\n      \n      const lines = csv.split('\\n');\n      expect(lines).toHaveLength(2); // Header + 1 data row\n      expect(lines[1]).toContain('Minimal Task');\n    });\n\n    test('includes project and assignee information', () => {\n      const task = createMockTask();\n      const csv = generateCSV([task]);\n      \n      expect(csv).toContain('Test Project');\n      expect(csv).toContain('John Doe');\n    });\n\n    test('handles recurring task information', () => {\n      const task = createRecurringTask();\n      const csv = generateCSV([task]);\n      \n      expect(csv).toContain('Yes'); // Is Recurring column\n      expect(csv).toContain('Daily'); // Recurring Pattern column\n    });\n  });\n\n  describe('generateJSON', () => {\n    test('generates valid JSON structure', () => {\n      const tasks = [createMockTask()];\n      const jsonStr = generateJSON(tasks);\n      const data = JSON.parse(jsonStr);\n      \n      expect(data).toHaveProperty('metadata');\n      expect(data).toHaveProperty('tasks');\n      expect(data.metadata).toHaveProperty('exportDate');\n      expect(data.metadata).toHaveProperty('version');\n      expect(data.metadata).toHaveProperty('source', 'Taskly Calendar');\n    });\n\n    test('includes complete task data', () => {\n      const task = createMockTask();\n      const jsonStr = generateJSON([task]);\n      const data = JSON.parse(jsonStr);\n      \n      const exportedTask = data.tasks[0];\n      \n      expect(exportedTask).toMatchObject({\n        id: task._id,\n        title: task.title,\n        description: task.description,\n        due: task.due,\n        priority: task.priority,\n        status: task.status,\n        tags: task.tags,\n        isRecurring: false\n      });\n    });\n\n    test('includes project and assignee data', () => {\n      const task = createMockTask();\n      const jsonStr = generateJSON([task]);\n      const data = JSON.parse(jsonStr);\n      \n      const exportedTask = data.tasks[0];\n      \n      expect(exportedTask.project).toMatchObject({\n        id: task.project._id,\n        name: task.project.name\n      });\n      \n      expect(exportedTask.assignee).toMatchObject({\n        id: task.assignee._id,\n        name: task.assignee.name,\n        email: task.assignee.email\n      });\n    });\n\n    test('includes recurring pattern for recurring tasks', () => {\n      const task = createRecurringTask();\n      const jsonStr = generateJSON([task]);\n      const data = JSON.parse(jsonStr);\n      \n      const exportedTask = data.tasks[0];\n      \n      expect(exportedTask.isRecurring).toBe(true);\n      expect(exportedTask.recurringPattern).toMatchObject(task.recurring);\n    });\n\n    test('includes custom metadata', () => {\n      const tasks = [createMockTask()];\n      const metadata = {\n        range: 'month',\n        customField: 'customValue'\n      };\n      const jsonStr = generateJSON(tasks, metadata);\n      const data = JSON.parse(jsonStr);\n      \n      expect(data.metadata).toMatchObject(metadata);\n    });\n  });\n\n  describe('importFromICalendar', () => {\n    test('imports basic task from iCalendar', () => {\n      const icalContent = [\n        'BEGIN:VCALENDAR',\n        'VERSION:2.0',\n        'BEGIN:VEVENT',\n        'SUMMARY:Imported Task',\n        'DESCRIPTION:Imported Description',\n        'DTSTART:20240115T100000Z',\n        'PRIORITY:1',\n        'STATUS:NEEDS-ACTION',\n        'CATEGORIES:work,urgent',\n        'END:VEVENT',\n        'END:VCALENDAR'\n      ].join('\\r\\n');\n      \n      const tasks = importFromICalendar(icalContent);\n      \n      expect(tasks).toHaveLength(1);\n      expect(tasks[0]).toMatchObject({\n        title: 'Imported Task',\n        description: 'Imported Description',\n        priority: 'high',\n        status: 'pending',\n        tags: ['work', 'urgent']\n      });\n    });\n\n    test('handles multiple events', () => {\n      const icalContent = [\n        'BEGIN:VCALENDAR',\n        'VERSION:2.0',\n        'BEGIN:VEVENT',\n        'SUMMARY:Task 1',\n        'DTSTART:20240115T100000Z',\n        'END:VEVENT',\n        'BEGIN:VEVENT',\n        'SUMMARY:Task 2',\n        'DTSTART:20240116T100000Z',\n        'END:VEVENT',\n        'END:VCALENDAR'\n      ].join('\\r\\n');\n      \n      const tasks = importFromICalendar(icalContent);\n      \n      expect(tasks).toHaveLength(2);\n      expect(tasks[0].title).toBe('Task 1');\n      expect(tasks[1].title).toBe('Task 2');\n    });\n\n    test('skips events without title or date', () => {\n      const icalContent = [\n        'BEGIN:VCALENDAR',\n        'VERSION:2.0',\n        'BEGIN:VEVENT',\n        'DESCRIPTION:No title or date',\n        'END:VEVENT',\n        'BEGIN:VEVENT',\n        'SUMMARY:Valid Task',\n        'DTSTART:20240115T100000Z',\n        'END:VEVENT',\n        'END:VCALENDAR'\n      ].join('\\r\\n');\n      \n      const tasks = importFromICalendar(icalContent);\n      \n      expect(tasks).toHaveLength(1);\n      expect(tasks[0].title).toBe('Valid Task');\n    });\n\n    test('unescapes iCalendar text', () => {\n      const icalContent = [\n        'BEGIN:VCALENDAR',\n        'VERSION:2.0',\n        'BEGIN:VEVENT',\n        'SUMMARY:Task with\\\\; special\\\\, characters\\\\nand newlines',\n        'DTSTART:20240115T100000Z',\n        'END:VEVENT',\n        'END:VCALENDAR'\n      ].join('\\r\\n');\n      \n      const tasks = importFromICalendar(icalContent);\n      \n      expect(tasks[0].title).toBe('Task with; special, characters\\nand newlines');\n    });\n  });\n\n  describe('importFromCSV', () => {\n    test('imports tasks from CSV', () => {\n      const csvContent = [\n        'Title,Description,Due Date,Priority,Status,Tags',\n        'Task 1,Description 1,2024-01-15,high,pending,work',\n        'Task 2,Description 2,2024-01-16,medium,completed,personal'\n      ].join('\\n');\n      \n      const tasks = importFromCSV(csvContent);\n      \n      expect(tasks).toHaveLength(2);\n      expect(tasks[0]).toMatchObject({\n        title: 'Task 1',\n        description: 'Description 1',\n        priority: 'high',\n        status: 'pending',\n        tags: ['work']\n      });\n    });\n\n    test('handles CSV with quoted fields', () => {\n      const csvContent = [\n        'Title,Description',\n        '\"Task with, comma\",\"Description with \"\"quotes\"\"\"'\n      ].join('\\n');\n      \n      const tasks = importFromCSV(csvContent);\n      \n      expect(tasks[0].title).toBe('Task with, comma');\n      expect(tasks[0].description).toBe('Description with \"quotes\"');\n    });\n\n    test('handles empty CSV', () => {\n      const csvContent = 'Title\\n';\n      \n      const tasks = importFromCSV(csvContent);\n      \n      expect(tasks).toHaveLength(0);\n    });\n\n    test('skips rows without title', () => {\n      const csvContent = [\n        'Title,Description',\n        ',Description without title',\n        'Valid Task,Valid Description'\n      ].join('\\n');\n      \n      const tasks = importFromCSV(csvContent);\n      \n      expect(tasks).toHaveLength(1);\n      expect(tasks[0].title).toBe('Valid Task');\n    });\n\n    test('handles multiple tags separated by semicolons', () => {\n      const csvContent = [\n        'Title,Tags',\n        'Task 1,work; urgent; important'\n      ].join('\\n');\n      \n      const tasks = importFromCSV(csvContent);\n      \n      expect(tasks[0].tags).toEqual(['work', 'urgent', 'important']);\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    test('handles empty task arrays', () => {\n      expect(generateICalendar([])).toContain('BEGIN:VCALENDAR');\n      expect(generateCSV([])).toContain('Title,Description');\n      expect(generateJSON([])).toContain('\"tasks\":[]');\n    });\n\n    test('handles malformed iCalendar content', () => {\n      const malformedContent = 'Not a valid iCalendar';\n      \n      const tasks = importFromICalendar(malformedContent);\n      \n      expect(tasks).toHaveLength(0);\n    });\n\n    test('handles malformed CSV content', () => {\n      const malformedContent = 'Not,a,valid,csv\\nwith,mismatched,columns';\n      \n      const tasks = importFromCSV(malformedContent);\n      \n      // Should handle gracefully, possibly returning empty array or partial data\n      expect(Array.isArray(tasks)).toBe(true);\n    });\n\n    test('handles tasks with null/undefined values', () => {\n      const task = {\n        _id: 'task-1',\n        title: 'Task with nulls',\n        description: null,\n        due: undefined,\n        tags: null,\n        project: null\n      };\n      \n      expect(() => generateICalendar([task])).not.toThrow();\n      expect(() => generateCSV([task])).not.toThrow();\n      expect(() => generateJSON([task])).not.toThrow();\n    });\n\n    test('handles very long text fields', () => {\n      const longText = 'A'.repeat(1000);\n      const task = createMockTask({\n        title: longText,\n        description: longText\n      });\n      \n      const ical = generateICalendar([task]);\n      const csv = generateCSV([task]);\n      const json = generateJSON([task]);\n      \n      expect(ical).toContain('SUMMARY:');\n      expect(csv).toContain(task.title);\n      expect(JSON.parse(json).tasks[0].title).toBe(longText);\n    });\n\n    test('handles special date formats', () => {\n      const task = createMockTask({\n        due: '2024-02-29T23:59:59.999Z' // Leap year, end of day\n      });\n      \n      expect(() => generateICalendar([task])).not.toThrow();\n      expect(() => generateCSV([task])).not.toThrow();\n      expect(() => generateJSON([task])).not.toThrow();\n    });\n  });\n\n  describe('Performance', () => {\n    test('handles large number of tasks efficiently', () => {\n      const tasks = Array.from({ length: 1000 }, (_, i) => \n        createMockTask({\n          _id: `task-${i}`,\n          title: `Task ${i}`,\n          due: addDays(new Date(), i % 30).toISOString()\n        })\n      );\n      \n      const startTime = performance.now();\n      \n      const ical = generateICalendar(tasks);\n      const csv = generateCSV(tasks);\n      const json = generateJSON(tasks);\n      \n      const endTime = performance.now();\n      const duration = endTime - startTime;\n      \n      // Should complete within reasonable time (adjust threshold as needed)\n      expect(duration).toBeLessThan(5000); // 5 seconds\n      \n      // Verify output is reasonable\n      expect(ical.split('BEGIN:VEVENT')).toHaveLength(1001); // 1000 events + 1 for the split\n      expect(csv.split('\\n')).toHaveLength(1001); // 1000 rows + header\n      expect(JSON.parse(json).tasks).toHaveLength(1000);\n    });\n  });\n});