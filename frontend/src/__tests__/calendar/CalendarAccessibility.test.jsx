import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport { axe, toHaveNoViolations } from 'jest-axe';\nimport { renderHook, act } from '@testing-library/react';\n\n// Extend Jest matchers\nexpect.extend(toHaveNoViolations);\n\n// Import components and hooks to test\nimport AccessibleCalendar, { \n  AccessibleDateCell, \n  AccessibleTaskItem, \n  AccessibleCalendarGrid \n} from '../../components/calendar/AccessibleCalendar';\nimport { \n  useCalendarAccessibility, \n  useCalendarFocus, \n  useCalendarAccessibilityPreferences \n} from '../../hooks/useCalendarAccessibility';\nimport { CalendarProvider } from '../../context/CalendarContext';\n\n// Mock data\nconst mockTasks = [\n  {\n    _id: 'task-1',\n    title: 'Test Task 1',\n    description: 'Description 1',\n    due: new Date('2024-01-15T10:00:00Z').toISOString(),\n    priority: 'high',\n    status: 'pending',\n    tags: ['work']\n  },\n  {\n    _id: 'task-2',\n    title: 'Test Task 2',\n    description: 'Description 2',\n    due: new Date('2024-01-15T14:00:00Z').toISOString(),\n    priority: 'medium',\n    status: 'in-progress',\n    tags: ['personal']\n  }\n];\n\nconst mockCalendarContext = {\n  currentDate: new Date('2024-01-15'),\n  setCurrentDate: jest.fn(),\n  currentView: 'month',\n  setView: jest.fn(),\n  selectedDate: null,\n  setSelectedDate: jest.fn(),\n  filteredTasks: mockTasks\n};\n\n// Test wrapper\nconst TestWrapper = ({ children }) => (\n  <CalendarProvider value={mockCalendarContext}>\n    {children}\n  </CalendarProvider>\n);\n\ndescribe('Calendar Accessibility Tests', () => {\n  describe('AccessibleCalendar Component', () => {\n    test('has no accessibility violations', async () => {\n      const { container } = render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    test('has proper ARIA attributes', () => {\n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendarContainer = screen.getByRole('application');\n      expect(calendarContainer).toHaveAttribute('aria-label');\n      expect(calendarContainer).toHaveAttribute('aria-describedby', 'calendar-instructions');\n      expect(calendarContainer).toHaveAttribute('tabIndex', '0');\n    });\n\n    test('provides screen reader instructions', () => {\n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const instructions = screen.getByText(/Use arrow keys to navigate/);\n      expect(instructions).toBeInTheDocument();\n      expect(instructions).toHaveClass('sr-only');\n    });\n\n    test('includes skip links', () => {\n      render(\n        <TestWrapper>\n          <AccessibleCalendar showSkipLinks={true}>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const skipToCalendar = screen.getByText('Skip to calendar');\n      const skipToControls = screen.getByText('Skip to calendar controls');\n      \n      expect(skipToCalendar).toBeInTheDocument();\n      expect(skipToControls).toBeInTheDocument();\n    });\n\n    test('has live region for announcements', () => {\n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const liveRegion = document.querySelector('[aria-live=\"polite\"]');\n      expect(liveRegion).toBeInTheDocument();\n    });\n  });\n\n  describe('Keyboard Navigation', () => {\n    test('responds to arrow key navigation', async () => {\n      const user = userEvent.setup();\n      const mockSetFocusedDate = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendar = screen.getByRole('application');\n      calendar.focus();\n      \n      await user.keyboard('{ArrowRight}');\n      await user.keyboard('{ArrowDown}');\n      await user.keyboard('{ArrowLeft}');\n      await user.keyboard('{ArrowUp}');\n      \n      // Should not throw errors and should handle navigation\n      expect(calendar).toHaveFocus();\n    });\n\n    test('supports view switching shortcuts', async () => {\n      const user = userEvent.setup();\n      const mockSetView = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendar = screen.getByRole('application');\n      calendar.focus();\n      \n      // Test view switching shortcuts\n      await user.keyboard('{Control>}1{/Control}'); // Month view\n      await user.keyboard('{Control>}2{/Control}'); // Week view\n      await user.keyboard('{Control>}3{/Control}'); // Day view\n      await user.keyboard('{Control>}4{/Control}'); // Agenda view\n      \n      // Should handle shortcuts without errors\n      expect(calendar).toHaveFocus();\n    });\n\n    test('supports today navigation shortcut', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendar = screen.getByRole('application');\n      calendar.focus();\n      \n      await user.keyboard('{Control>}t{/Control}');\n      \n      // Should handle today shortcut\n      expect(calendar).toHaveFocus();\n    });\n\n    test('handles Enter and Space for selection', async () => {\n      const user = userEvent.setup();\n      const mockOnDateSelect = jest.fn();\n      \n      render(\n        <TestWrapper>\n          <AccessibleCalendar onDateSelect={mockOnDateSelect}>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendar = screen.getByRole('application');\n      calendar.focus();\n      \n      await user.keyboard('{Enter}');\n      await user.keyboard(' ');\n      \n      // Should handle selection keys\n      expect(calendar).toHaveFocus();\n    });\n\n    test('supports Tab navigation between tasks', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendar = screen.getByRole('application');\n      calendar.focus();\n      \n      await user.keyboard('{Tab}');\n      await user.keyboard('{Shift>}{Tab}{/Shift}');\n      \n      // Should handle task navigation\n      expect(calendar).toHaveFocus();\n    });\n\n    test('supports Escape to exit task navigation', async () => {\n      const user = userEvent.setup();\n      \n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const calendar = screen.getByRole('application');\n      calendar.focus();\n      \n      await user.keyboard('{Escape}');\n      \n      // Should handle escape key\n      expect(calendar).toHaveFocus();\n    });\n  });\n\n  describe('AccessibleDateCell Component', () => {\n    const mockDate = new Date('2024-01-15');\n    const mockGetDateAriaLabel = jest.fn(() => 'Monday, January 15, 2024, 2 tasks');\n    const mockGetTaskAriaLabel = jest.fn(() => 'Task 1 of 2: Test Task');\n    \n    test('has no accessibility violations', async () => {\n      const { container } = render(\n        <AccessibleDateCell\n          date={mockDate}\n          tasks={mockTasks}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    test('has proper ARIA attributes', () => {\n      render(\n        <AccessibleDateCell\n          date={mockDate}\n          tasks={mockTasks}\n          isSelected={true}\n          isFocused={true}\n          isToday={true}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const dateCell = screen.getByRole('gridcell');\n      expect(dateCell).toHaveAttribute('aria-label');\n      expect(dateCell).toHaveAttribute('aria-selected', 'true');\n      expect(dateCell).toHaveAttribute('aria-current', 'date');\n      expect(dateCell).toHaveAttribute('tabIndex', '0');\n    });\n\n    test('announces task count correctly', () => {\n      render(\n        <AccessibleDateCell\n          date={mockDate}\n          tasks={mockTasks}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const taskList = screen.getByRole('list');\n      expect(taskList).toHaveAttribute('aria-label', '2 tasks on this date');\n    });\n\n    test('handles keyboard interaction', async () => {\n      const user = userEvent.setup();\n      const mockOnClick = jest.fn();\n      \n      render(\n        <AccessibleDateCell\n          date={mockDate}\n          tasks={[]}\n          onClick={mockOnClick}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          isFocused={true}\n        />\n      );\n      \n      const dateCell = screen.getByRole('gridcell');\n      \n      await user.keyboard('{Enter}');\n      expect(mockOnClick).toHaveBeenCalledWith(mockDate);\n      \n      await user.keyboard(' ');\n      expect(mockOnClick).toHaveBeenCalledTimes(2);\n    });\n\n    test('shows hidden task count when tasks exceed limit', () => {\n      const manyTasks = Array.from({ length: 5 }, (_, i) => ({\n        ...mockTasks[0],\n        _id: `task-${i}`,\n        title: `Task ${i}`\n      }));\n      \n      render(\n        <AccessibleDateCell\n          date={mockDate}\n          tasks={manyTasks}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      expect(screen.getByText('+2 more')).toBeInTheDocument();\n    });\n  });\n\n  describe('AccessibleTaskItem Component', () => {\n    const mockTask = mockTasks[0];\n    const mockGetTaskAriaLabel = jest.fn(() => 'Task 1 of 2: Test Task 1, priority high, status pending');\n    \n    test('has no accessibility violations', async () => {\n      const { container } = render(\n        <AccessibleTaskItem\n          task={mockTask}\n          index={0}\n          total={2}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    test('has proper ARIA attributes', () => {\n      render(\n        <AccessibleTaskItem\n          task={mockTask}\n          index={0}\n          total={2}\n          isFocused={true}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const taskItem = screen.getByRole('listitem');\n      expect(taskItem).toHaveAttribute('aria-label');\n      expect(taskItem).toHaveAttribute('tabIndex', '0');\n    });\n\n    test('provides screen reader context', () => {\n      render(\n        <AccessibleTaskItem\n          task={mockTask}\n          index={0}\n          total={2}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const srText = screen.getByText(/Priority: high, Status: pending/);\n      expect(srText).toHaveClass('sr-only');\n    });\n\n    test('handles keyboard interaction', async () => {\n      const user = userEvent.setup();\n      const mockOnClick = jest.fn();\n      \n      render(\n        <AccessibleTaskItem\n          task={mockTask}\n          index={0}\n          total={2}\n          onClick={mockOnClick}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n          isFocused={true}\n        />\n      );\n      \n      const taskItem = screen.getByRole('listitem');\n      \n      await user.keyboard('{Enter}');\n      expect(mockOnClick).toHaveBeenCalledWith(mockTask);\n      \n      await user.keyboard(' ');\n      expect(mockOnClick).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('AccessibleCalendarGrid Component', () => {\n    const mockDates = Array.from({ length: 42 }, (_, i) => {\n      const date = new Date('2024-01-01');\n      date.setDate(date.getDate() + i);\n      return date;\n    });\n    \n    const mockGetDateAriaLabel = jest.fn(() => 'Date label');\n    const mockGetTaskAriaLabel = jest.fn(() => 'Task label');\n    \n    test('has no accessibility violations', async () => {\n      const { container } = render(\n        <AccessibleCalendarGrid\n          dates={mockDates}\n          tasks={mockTasks}\n          currentMonth={new Date('2024-01-01')}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const results = await axe(container);\n      expect(results).toHaveNoViolations();\n    });\n\n    test('has proper grid structure', () => {\n      render(\n        <AccessibleCalendarGrid\n          dates={mockDates}\n          tasks={mockTasks}\n          currentMonth={new Date('2024-01-01')}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      const grid = screen.getByRole('grid');\n      expect(grid).toHaveAttribute('aria-label', 'Calendar dates');\n      \n      const columnHeaders = screen.getAllByRole('columnheader');\n      expect(columnHeaders).toHaveLength(7); // Days of week\n      \n      const rows = screen.getAllByRole('row');\n      expect(rows.length).toBeGreaterThan(1); // Header + date rows\n    });\n\n    test('shows abbreviated day names on small screens', () => {\n      render(\n        <AccessibleCalendarGrid\n          dates={mockDates}\n          tasks={mockTasks}\n          currentMonth={new Date('2024-01-01')}\n          getDateAriaLabel={mockGetDateAriaLabel}\n          getTaskAriaLabel={mockGetTaskAriaLabel}\n        />\n      );\n      \n      // Both full and abbreviated names should be present\n      expect(screen.getByText('Sunday')).toBeInTheDocument();\n      expect(screen.getByText('Sun')).toBeInTheDocument();\n    });\n  });\n\n  describe('useCalendarAccessibility Hook', () => {\n    const mockProps = {\n      currentDate: new Date('2024-01-15'),\n      setCurrentDate: jest.fn(),\n      currentView: 'month',\n      setView: jest.fn(),\n      selectedDate: null,\n      setSelectedDate: jest.fn(),\n      tasks: mockTasks,\n      onTaskSelect: jest.fn(),\n      onDateSelect: jest.fn()\n    };\n\n    test('provides keyboard navigation functions', () => {\n      const { result } = renderHook(() => useCalendarAccessibility(mockProps));\n      \n      expect(result.current.navigateDate).toBeInstanceOf(Function);\n      expect(result.current.navigateTask).toBeInstanceOf(Function);\n      expect(result.current.handleKeyDown).toBeInstanceOf(Function);\n      expect(result.current.focusCalendar).toBeInstanceOf(Function);\n    });\n\n    test('provides ARIA label generators', () => {\n      const { result } = renderHook(() => useCalendarAccessibility(mockProps));\n      \n      expect(result.current.getDateAriaLabel).toBeInstanceOf(Function);\n      expect(result.current.getTaskAriaLabel).toBeInstanceOf(Function);\n      expect(result.current.getCalendarAriaLabel).toBeInstanceOf(Function);\n    });\n\n    test('generates correct date ARIA labels', () => {\n      const { result } = renderHook(() => useCalendarAccessibility(mockProps));\n      \n      const date = new Date('2024-01-15');\n      const label = result.current.getDateAriaLabel(date);\n      \n      expect(label).toContain('Monday, January 15, 2024');\n      expect(label).toContain('2 tasks');\n    });\n\n    test('generates correct task ARIA labels', () => {\n      const { result } = renderHook(() => useCalendarAccessibility(mockProps));\n      \n      const task = mockTasks[0];\n      const label = result.current.getTaskAriaLabel(task, 0, 2);\n      \n      expect(label).toContain('Task 1 of 2');\n      expect(label).toContain(task.title);\n      expect(label).toContain(task.priority);\n      expect(label).toContain(task.status);\n    });\n\n    test('handles date navigation correctly', () => {\n      const { result } = renderHook(() => useCalendarAccessibility(mockProps));\n      \n      act(() => {\n        result.current.navigateDate('right');\n      });\n      \n      // Should update focused date\n      expect(result.current.focusedDate).not.toEqual(mockProps.currentDate);\n    });\n\n    test('announces changes to screen readers', () => {\n      const { result } = renderHook(() => useCalendarAccessibility(mockProps));\n      \n      act(() => {\n        result.current.announce('Test announcement');\n      });\n      \n      // Should add announcement (implementation detail)\n      expect(result.current.announce).toBeInstanceOf(Function);\n    });\n  });\n\n  describe('useCalendarFocus Hook', () => {\n    test('provides focus management functions', () => {\n      const { result } = renderHook(() => useCalendarFocus());\n      \n      expect(result.current.trapFocus).toBeInstanceOf(Function);\n      expect(result.current.saveFocus).toBeInstanceOf(Function);\n      expect(result.current.restoreFocus).toBeInstanceOf(Function);\n    });\n\n    test('saves and restores focus correctly', () => {\n      const { result } = renderHook(() => useCalendarFocus());\n      \n      // Create a focusable element\n      const button = document.createElement('button');\n      document.body.appendChild(button);\n      button.focus();\n      \n      act(() => {\n        result.current.saveFocus();\n      });\n      \n      // Change focus\n      document.body.focus();\n      \n      act(() => {\n        result.current.restoreFocus();\n      });\n      \n      expect(document.activeElement).toBe(button);\n      \n      document.body.removeChild(button);\n    });\n  });\n\n  describe('useCalendarAccessibilityPreferences Hook', () => {\n    test('detects accessibility preferences', () => {\n      const { result } = renderHook(() => useCalendarAccessibilityPreferences());\n      \n      expect(typeof result.current.prefersReducedMotion).toBe('boolean');\n      expect(typeof result.current.prefersHighContrast).toBe('boolean');\n      expect(result.current.fontSize).toBeDefined();\n    });\n\n    test('generates accessibility classes', () => {\n      const { result } = renderHook(() => useCalendarAccessibilityPreferences());\n      \n      const classes = result.current.getAccessibilityClasses();\n      expect(typeof classes).toBe('string');\n      expect(classes).toContain('font-size-');\n    });\n\n    test('allows font size changes', () => {\n      const { result } = renderHook(() => useCalendarAccessibilityPreferences());\n      \n      act(() => {\n        result.current.setFontSize('large');\n      });\n      \n      expect(result.current.fontSize).toBe('large');\n    });\n  });\n\n  describe('Screen Reader Support', () => {\n    test('provides meaningful content for screen readers', () => {\n      render(\n        <TestWrapper>\n          <AccessibleCalendar>\n            <div>Calendar Content</div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      // Check for screen reader only content\n      const srOnlyElements = document.querySelectorAll('.sr-only');\n      expect(srOnlyElements.length).toBeGreaterThan(0);\n    });\n\n    test('uses proper heading hierarchy', () => {\n      render(\n        <TestWrapper>\n          <AccessibleCalendar showKeyboardHelp={true}>\n            <div>\n              <h1>Calendar</h1>\n              <h2>January 2024</h2>\n            </div>\n          </AccessibleCalendar>\n        </TestWrapper>\n      );\n      \n      const headings = screen.getAllByRole('heading');\n      expect(headings.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('High Contrast Mode', () => {\n    test('applies high contrast styles when preferred', () => {\n      // Mock high contrast preference\n      Object.defineProperty(window, 'matchMedia', {\n        writable: true,\n        value: jest.fn().mockImplementation(query => ({\n          matches: query === '(prefers-contrast: high)',\n          media: query,\n          onchange: null,\n          addListener: jest.fn(),\n          removeListener: jest.fn(),\n          addEventListener: jest.fn(),\n          removeEventListener: jest.fn(),\n          dispatchEvent: jest.fn(),\n        })),\n      });\n      \n      const { result } = renderHook(() => useCalendarAccessibilityPreferences());\n      \n      expect(result.current.prefersHighContrast).toBe(true);\n      expect(result.current.getAccessibilityClasses()).toContain('high-contrast');\n    });\n  });\n\n  describe('Reduced Motion', () => {\n    test('respects reduced motion preference', () => {\n      // Mock reduced motion preference\n      Object.defineProperty(window, 'matchMedia', {\n        writable: true,\n        value: jest.fn().mockImplementation(query => ({\n          matches: query === '(prefers-reduced-motion: reduce)',\n          media: query,\n          onchange: null,\n          addListener: jest.fn(),\n          removeListener: jest.fn(),\n          addEventListener: jest.fn(),\n          removeEventListener: jest.fn(),\n          dispatchEvent: jest.fn(),\n        })),\n      });\n      \n      const { result } = renderHook(() => useCalendarAccessibilityPreferences());\n      \n      expect(result.current.prefersReducedMotion).toBe(true);\n      expect(result.current.getAccessibilityClasses()).toContain('motion-reduce');\n    });\n  });\n});