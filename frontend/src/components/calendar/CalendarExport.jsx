import React, { useState, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  ArrowDownTrayIcon,\n  ShareIcon,\n  DocumentIcon,\n  CalendarIcon,\n  TableCellsIcon,\n  LinkIcon,\n  CheckIcon,\n  XMarkIcon,\n  InformationCircleIcon\n} from '@heroicons/react/24/outline';\nimport { format, startOfMonth, endOfMonth, startOfWeek, endOfWeek } from 'date-fns';\nimport { useCalendar } from '../../context/CalendarContext';\nimport { useCalendarSharing } from '../../hooks/useCalendarRouting';\nimport { generateICalendar, generateCSV, generateJSON } from '../../utils/calendarExportUtils';\n\nconst CalendarExport = ({\n  onClose,\n  className = ''\n}) => {\n  const { \n    allTasks, \n    currentDate, \n    currentView, \n    filters,\n    filteredTasks \n  } = useCalendar();\n  \n  const { copyShareableUrl, getShareableLinks } = useCalendarSharing();\n  \n  const [exportFormat, setExportFormat] = useState('ical');\n  const [exportRange, setExportRange] = useState('current');\n  const [includeCompleted, setIncludeCompleted] = useState(false);\n  const [includeRecurring, setIncludeRecurring] = useState(true);\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportSuccess, setExportSuccess] = useState(false);\n  const [shareSuccess, setShareSuccess] = useState(false);\n\n  // Export format options\n  const exportFormats = [\n    {\n      id: 'ical',\n      name: 'iCalendar (.ics)',\n      description: 'Standard calendar format compatible with most calendar apps',\n      icon: CalendarIcon,\n      extension: 'ics'\n    },\n    {\n      id: 'csv',\n      name: 'CSV (.csv)',\n      description: 'Spreadsheet format for data analysis',\n      icon: TableCellsIcon,\n      extension: 'csv'\n    },\n    {\n      id: 'json',\n      name: 'JSON (.json)',\n      description: 'Structured data format for developers',\n      icon: DocumentIcon,\n      extension: 'json'\n    }\n  ];\n\n  // Export range options\n  const exportRanges = [\n    {\n      id: 'current',\n      name: 'Current View',\n      description: getCurrentViewDescription()\n    },\n    {\n      id: 'month',\n      name: 'Current Month',\n      description: format(currentDate, 'MMMM yyyy')\n    },\n    {\n      id: 'quarter',\n      name: 'Current Quarter',\n      description: 'Next 3 months'\n    },\n    {\n      id: 'year',\n      name: 'Current Year',\n      description: format(currentDate, 'yyyy')\n    },\n    {\n      id: 'all',\n      name: 'All Tasks',\n      description: 'All tasks regardless of date'\n    }\n  ];\n\n  // Get current view description\n  function getCurrentViewDescription() {\n    switch (currentView) {\n      case 'month':\n        return format(currentDate, 'MMMM yyyy');\n      case 'week':\n        const weekStart = startOfWeek(currentDate);\n        const weekEnd = endOfWeek(currentDate);\n        return `${format(weekStart, 'MMM d')} - ${format(weekEnd, 'MMM d, yyyy')}`;\n      case 'day':\n        return format(currentDate, 'MMMM d, yyyy');\n      case 'agenda':\n        return 'Upcoming tasks';\n      default:\n        return 'Current view';\n    }\n  }\n\n  // Get tasks for export based on range\n  const getTasksForExport = useCallback(() => {\n    let tasksToExport = [];\n    \n    switch (exportRange) {\n      case 'current':\n        tasksToExport = filteredTasks;\n        break;\n      case 'month':\n        const monthStart = startOfMonth(currentDate);\n        const monthEnd = endOfMonth(currentDate);\n        tasksToExport = allTasks.filter(task => {\n          if (!task.due) return false;\n          const taskDate = new Date(task.due);\n          return taskDate >= monthStart && taskDate <= monthEnd;\n        });\n        break;\n      case 'quarter':\n        const quarterEnd = new Date(currentDate);\n        quarterEnd.setMonth(quarterEnd.getMonth() + 3);\n        tasksToExport = allTasks.filter(task => {\n          if (!task.due) return false;\n          const taskDate = new Date(task.due);\n          return taskDate >= currentDate && taskDate <= quarterEnd;\n        });\n        break;\n      case 'year':\n        const yearStart = new Date(currentDate.getFullYear(), 0, 1);\n        const yearEnd = new Date(currentDate.getFullYear(), 11, 31);\n        tasksToExport = allTasks.filter(task => {\n          if (!task.due) return false;\n          const taskDate = new Date(task.due);\n          return taskDate >= yearStart && taskDate <= yearEnd;\n        });\n        break;\n      case 'all':\n        tasksToExport = allTasks;\n        break;\n      default:\n        tasksToExport = filteredTasks;\n    }\n\n    // Apply filters\n    if (!includeCompleted) {\n      tasksToExport = tasksToExport.filter(task => task.status !== 'completed');\n    }\n\n    if (!includeRecurring) {\n      tasksToExport = tasksToExport.filter(task => !task.isRecurring);\n    }\n\n    return tasksToExport;\n  }, [allTasks, filteredTasks, exportRange, currentDate, currentView, includeCompleted, includeRecurring]);\n\n  // Handle export\n  const handleExport = useCallback(async () => {\n    setIsExporting(true);\n    setExportSuccess(false);\n\n    try {\n      const tasks = getTasksForExport();\n      const selectedFormat = exportFormats.find(f => f.id === exportFormat);\n      \n      let content = '';\n      let mimeType = 'text/plain';\n      \n      switch (exportFormat) {\n        case 'ical':\n          content = generateICalendar(tasks, {\n            calendarName: `Taskly Calendar - ${getCurrentViewDescription()}`,\n            includeRecurring\n          });\n          mimeType = 'text/calendar';\n          break;\n        case 'csv':\n          content = generateCSV(tasks);\n          mimeType = 'text/csv';\n          break;\n        case 'json':\n          content = generateJSON(tasks, {\n            exportDate: new Date().toISOString(),\n            range: exportRange,\n            filters: {\n              includeCompleted,\n              includeRecurring\n            }\n          });\n          mimeType = 'application/json';\n          break;\n        default:\n          throw new Error('Unsupported export format');\n      }\n\n      // Create and download file\n      const blob = new Blob([content], { type: mimeType });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      \n      const filename = `taskly-calendar-${format(new Date(), 'yyyy-MM-dd')}.${selectedFormat.extension}`;\n      link.href = url;\n      link.download = filename;\n      link.click();\n      \n      URL.revokeObjectURL(url);\n      \n      setExportSuccess(true);\n      setTimeout(() => setExportSuccess(false), 3000);\n    } catch (error) {\n      console.error('Export failed:', error);\n      // Handle error (show toast, etc.)\n    } finally {\n      setIsExporting(false);\n    }\n  }, [exportFormat, getTasksForExport, exportFormats, includeRecurring]);\n\n  // Handle share URL copy\n  const handleCopyShareUrl = useCallback(async () => {\n    try {\n      const result = await copyShareableUrl();\n      if (result.success) {\n        setShareSuccess(true);\n        setTimeout(() => setShareSuccess(false), 3000);\n      }\n    } catch (error) {\n      console.error('Failed to copy share URL:', error);\n    }\n  }, [copyShareableUrl]);\n\n  // Handle external sharing\n  const handleExternalShare = useCallback((platform) => {\n    const links = getShareableLinks();\n    const url = links[platform];\n    \n    if (url) {\n      window.open(url, '_blank', 'noopener,noreferrer');\n    }\n  }, [getShareableLinks]);\n\n  return (\n    <div className={`calendar-export ${className}`}>\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-secondary-900 dark:text-secondary-100\">\n          Export & Share Calendar\n        </h3>\n        <button\n          onClick={onClose}\n          className=\"p-2 text-secondary-400 hover:text-secondary-600 dark:hover:text-secondary-300 rounded-lg hover:bg-secondary-100 dark:hover:bg-secondary-700 transition-colors\"\n        >\n          <XMarkIcon className=\"w-5 h-5\" />\n        </button>\n      </div>\n\n      <div className=\"space-y-8\">\n        {/* Export Section */}\n        <div>\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <ArrowDownTrayIcon className=\"w-5 h-5 text-primary-600 dark:text-primary-400\" />\n            <h4 className=\"text-md font-medium text-secondary-900 dark:text-secondary-100\">\n              Export Calendar\n            </h4>\n          </div>\n\n          {/* Export Format */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2\">\n              Export Format\n            </label>\n            <div className=\"grid grid-cols-1 gap-3\">\n              {exportFormats.map(format => {\n                const Icon = format.icon;\n                return (\n                  <label\n                    key={format.id}\n                    className={`\n                      flex items-start space-x-3 p-3 border rounded-lg cursor-pointer transition-colors\n                      ${exportFormat === format.id\n                        ? 'border-primary-300 bg-primary-50 dark:bg-primary-900/20 dark:border-primary-700'\n                        : 'border-secondary-300 dark:border-secondary-600 hover:bg-secondary-50 dark:hover:bg-secondary-800'\n                      }\n                    `}\n                  >\n                    <input\n                      type=\"radio\"\n                      name=\"exportFormat\"\n                      value={format.id}\n                      checked={exportFormat === format.id}\n                      onChange={(e) => setExportFormat(e.target.value)}\n                      className=\"mt-1 text-primary-600 focus:ring-primary-500\"\n                    />\n                    <Icon className=\"w-5 h-5 text-secondary-600 dark:text-secondary-400 mt-0.5\" />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-secondary-900 dark:text-secondary-100\">\n                        {format.name}\n                      </div>\n                      <div className=\"text-sm text-secondary-600 dark:text-secondary-400\">\n                        {format.description}\n                      </div>\n                    </div>\n                  </label>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Export Range */}\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2\">\n              Date Range\n            </label>\n            <select\n              value={exportRange}\n              onChange={(e) => setExportRange(e.target.value)}\n              className=\"w-full px-3 py-2 border border-secondary-300 dark:border-secondary-600 rounded-lg bg-white dark:bg-secondary-800 text-secondary-900 dark:text-secondary-100 focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n            >\n              {exportRanges.map(range => (\n                <option key={range.id} value={range.id}>\n                  {range.name} - {range.description}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Export Options */}\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2\">\n              Options\n            </label>\n            <div className=\"space-y-2\">\n              <label className=\"flex items-center space-x-2 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={includeCompleted}\n                  onChange={(e) => setIncludeCompleted(e.target.checked)}\n                  className=\"rounded border-secondary-300 dark:border-secondary-600 text-primary-600 focus:ring-primary-500\"\n                />\n                <span className=\"text-sm text-secondary-700 dark:text-secondary-300\">\n                  Include completed tasks\n                </span>\n              </label>\n              <label className=\"flex items-center space-x-2 cursor-pointer\">\n                <input\n                  type=\"checkbox\"\n                  checked={includeRecurring}\n                  onChange={(e) => setIncludeRecurring(e.target.checked)}\n                  className=\"rounded border-secondary-300 dark:border-secondary-600 text-primary-600 focus:ring-primary-500\"\n                />\n                <span className=\"text-sm text-secondary-700 dark:text-secondary-300\">\n                  Include recurring task instances\n                </span>\n              </label>\n            </div>\n          </div>\n\n          {/* Export Button */}\n          <button\n            onClick={handleExport}\n            disabled={isExporting}\n            className=\"w-full flex items-center justify-center space-x-2 px-4 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n          >\n            {isExporting ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                <span>Exporting...</span>\n              </>\n            ) : (\n              <>\n                <ArrowDownTrayIcon className=\"w-4 h-4\" />\n                <span>Export Calendar</span>\n              </>\n            )}\n          </button>\n\n          {/* Export Success */}\n          <AnimatePresence>\n            {exportSuccess && (\n              <motion.div\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                className=\"mt-3 flex items-center space-x-2 text-green-600 dark:text-green-400\"\n              >\n                <CheckIcon className=\"w-4 h-4\" />\n                <span className=\"text-sm\">Calendar exported successfully!</span>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Share Section */}\n        <div className=\"border-t border-secondary-200 dark:border-secondary-700 pt-8\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <ShareIcon className=\"w-5 h-5 text-primary-600 dark:text-primary-400\" />\n            <h4 className=\"text-md font-medium text-secondary-900 dark:text-secondary-100\">\n              Share Calendar View\n            </h4>\n          </div>\n\n          <div className=\"mb-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg\">\n            <div className=\"flex items-start space-x-2\">\n              <InformationCircleIcon className=\"w-4 h-4 text-blue-600 dark:text-blue-400 mt-0.5\" />\n              <div className=\"text-sm text-blue-700 dark:text-blue-300\">\n                Share a link to your current calendar view with applied filters and date range.\n              </div>\n            </div>\n          </div>\n\n          {/* Copy Link */}\n          <div className=\"mb-4\">\n            <button\n              onClick={handleCopyShareUrl}\n              className=\"w-full flex items-center justify-center space-x-2 px-4 py-3 border border-secondary-300 dark:border-secondary-600 text-secondary-700 dark:text-secondary-300 rounded-lg hover:bg-secondary-50 dark:hover:bg-secondary-800 transition-colors\"\n            >\n              <LinkIcon className=\"w-4 h-4\" />\n              <span>Copy Shareable Link</span>\n            </button>\n\n            <AnimatePresence>\n              {shareSuccess && (\n                <motion.div\n                  initial={{ opacity: 0, y: 10 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -10 }}\n                  className=\"mt-2 flex items-center space-x-2 text-green-600 dark:text-green-400\"\n                >\n                  <CheckIcon className=\"w-4 h-4\" />\n                  <span className=\"text-sm\">Link copied to clipboard!</span>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n\n          {/* Social Sharing */}\n          <div>\n            <label className=\"block text-sm font-medium text-secondary-700 dark:text-secondary-300 mb-2\">\n              Share on Social Media\n            </label>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <button\n                onClick={() => handleExternalShare('twitter')}\n                className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n              >\n                <span>Twitter</span>\n              </button>\n              <button\n                onClick={() => handleExternalShare('linkedin')}\n                className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-700 text-white rounded-lg hover:bg-blue-800 transition-colors\"\n              >\n                <span>LinkedIn</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CalendarExport;