import React, { forwardRef, useImperativeHandle } from 'react';\nimport { \n  useCalendarAccessibility, \n  useCalendarFocus, \n  useCalendarAccessibilityPreferences \n} from '../../hooks/useCalendarAccessibility';\nimport { useCalendar } from '../../context/CalendarContext';\n\n/**\n * Accessible calendar wrapper component that provides keyboard navigation,\n * screen reader support, and accessibility features\n */\nconst AccessibleCalendar = forwardRef(({\n  children,\n  onTaskSelect,\n  onDateSelect,\n  className = '',\n  showSkipLinks = true,\n  showKeyboardHelp = false\n}, ref) => {\n  const {\n    currentDate,\n    setCurrentDate,\n    currentView,\n    setView,\n    selectedDate,\n    setSelectedDate,\n    filteredTasks\n  } = useCalendar();\n\n  const {\n    focusedDate,\n    focusedTaskIndex,\n    handleKeyDown,\n    focusCalendar,\n    getDateAriaLabel,\n    getTaskAriaLabel,\n    getCalendarAriaLabel,\n    announce,\n    LiveRegion,\n    SkipLinks,\n    getKeyboardShortcuts,\n    calendarRef\n  } = useCalendarAccessibility({\n    currentDate,\n    setCurrentDate,\n    currentView,\n    setView,\n    selectedDate,\n    setSelectedDate,\n    tasks: filteredTasks,\n    onTaskSelect,\n    onDateSelect\n  });\n\n  const { saveFocus, restoreFocus } = useCalendarFocus();\n  const { getAccessibilityClasses } = useCalendarAccessibilityPreferences();\n\n  // Expose methods to parent components\n  useImperativeHandle(ref, () => ({\n    focus: focusCalendar,\n    announce,\n    getFocusedDate: () => focusedDate,\n    getFocusedTaskIndex: () => focusedTaskIndex\n  }), [focusCalendar, announce, focusedDate, focusedTaskIndex]);\n\n  return (\n    <div className={`accessible-calendar ${getAccessibilityClasses()} ${className}`}>\n      {/* Skip Links */}\n      {showSkipLinks && <SkipLinks />}\n      \n      {/* Live Region for Screen Reader Announcements */}\n      <LiveRegion />\n      \n      {/* Keyboard Help */}\n      {showKeyboardHelp && (\n        <KeyboardHelpDialog shortcuts={getKeyboardShortcuts()} />\n      )}\n      \n      {/* Main Calendar Container */}\n      <div\n        ref={calendarRef}\n        id=\"calendar-main\"\n        role=\"application\"\n        aria-label={getCalendarAriaLabel()}\n        aria-describedby=\"calendar-instructions\"\n        tabIndex={0}\n        onKeyDown={handleKeyDown}\n        className=\"calendar-container focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 rounded-lg\"\n      >\n        {/* Screen Reader Instructions */}\n        <div id=\"calendar-instructions\" className=\"sr-only\">\n          Use arrow keys to navigate between dates. Press Tab to navigate between tasks on a date.\n          Press Enter or Space to select a date or task. Press Escape to exit task navigation.\n          Use Ctrl+1-4 to switch between calendar views. Press Ctrl+T to go to today.\n        </div>\n        \n        {/* Calendar Content */}\n        {React.cloneElement(children, {\n          focusedDate,\n          focusedTaskIndex,\n          getDateAriaLabel,\n          getTaskAriaLabel,\n          announce,\n          saveFocus,\n          restoreFocus\n        })}\n      </div>\n    </div>\n  );\n});\n\nAccessibleCalendar.displayName = 'AccessibleCalendar';\n\n/**\n * Keyboard help dialog component\n */\nconst KeyboardHelpDialog = ({ shortcuts, isOpen, onClose }) => {\n  const { trapFocus } = useCalendarFocus();\n  const dialogRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isOpen && dialogRef.current) {\n      const cleanup = trapFocus(dialogRef);\n      return cleanup;\n    }\n  }, [isOpen, trapFocus]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div \n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"keyboard-help-title\"\n    >\n      <div \n        ref={dialogRef}\n        className=\"bg-white dark:bg-secondary-800 rounded-lg shadow-xl max-w-md w-full mx-4 p-6\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 id=\"keyboard-help-title\" className=\"text-lg font-semibold text-secondary-900 dark:text-secondary-100\">\n            Keyboard Shortcuts\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 text-secondary-400 hover:text-secondary-600 dark:hover:text-secondary-300 rounded focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            aria-label=\"Close keyboard help\"\n          >\n            Ã—\n          </button>\n        </div>\n        \n        <div className=\"space-y-3\">\n          {shortcuts.map((shortcut, index) => (\n            <div key={index} className=\"flex justify-between items-center\">\n              <kbd className=\"px-2 py-1 bg-secondary-100 dark:bg-secondary-700 rounded text-sm font-mono\">\n                {shortcut.key}\n              </kbd>\n              <span className=\"text-sm text-secondary-600 dark:text-secondary-400 ml-3 flex-1\">\n                {shortcut.description}\n              </span>\n            </div>\n          ))}\n        </div>\n        \n        <div className=\"mt-6 flex justify-end\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\"\n          >\n            Close\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Accessible date cell component\n */\nexport const AccessibleDateCell = ({\n  date,\n  tasks = [],\n  isSelected = false,\n  isFocused = false,\n  isToday = false,\n  isCurrentMonth = true,\n  onClick,\n  onTaskClick,\n  getDateAriaLabel,\n  getTaskAriaLabel,\n  focusedTaskIndex = -1,\n  className = ''\n}) => {\n  const cellRef = React.useRef();\n  \n  // Focus management\n  React.useEffect(() => {\n    if (isFocused && cellRef.current) {\n      cellRef.current.focus();\n    }\n  }, [isFocused]);\n\n  const handleClick = (event) => {\n    event.preventDefault();\n    onClick?.(date);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      onClick?.(date);\n    }\n  };\n\n  return (\n    <div\n      ref={cellRef}\n      role=\"gridcell\"\n      tabIndex={isFocused ? 0 : -1}\n      aria-label={getDateAriaLabel?.(date)}\n      aria-selected={isSelected}\n      aria-current={isToday ? 'date' : undefined}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      className={`\n        accessible-date-cell relative p-2 border border-secondary-200 dark:border-secondary-700\n        cursor-pointer transition-colors duration-150\n        ${isCurrentMonth \n          ? 'bg-white dark:bg-secondary-800' \n          : 'bg-secondary-50 dark:bg-secondary-900 text-secondary-400'\n        }\n        ${isSelected ? 'ring-2 ring-primary-500 bg-primary-50 dark:bg-primary-900/20' : ''}\n        ${isFocused ? 'ring-2 ring-offset-2 ring-primary-500' : ''}\n        ${isToday ? 'bg-primary-100 dark:bg-primary-900/30' : ''}\n        hover:bg-secondary-100 dark:hover:bg-secondary-700\n        focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2\n        ${className}\n      `}\n    >\n      {/* Date Number */}\n      <div className={`\n        text-sm font-medium mb-2\n        ${isToday ? 'text-primary-600 dark:text-primary-400' : 'text-secondary-900 dark:text-secondary-100'}\n        ${!isCurrentMonth ? 'text-secondary-400' : ''}\n      `}>\n        {date.getDate()}\n      </div>\n\n      {/* Tasks */}\n      {tasks.length > 0 && (\n        <div \n          role=\"list\" \n          aria-label={`${tasks.length} task${tasks.length !== 1 ? 's' : ''} on this date`}\n          className=\"space-y-1\"\n        >\n          {tasks.slice(0, 3).map((task, index) => (\n            <AccessibleTaskItem\n              key={task._id || task.id}\n              task={task}\n              index={index}\n              total={tasks.length}\n              isFocused={focusedTaskIndex === index}\n              onClick={onTaskClick}\n              getTaskAriaLabel={getTaskAriaLabel}\n            />\n          ))}\n          \n          {tasks.length > 3 && (\n            <div \n              className=\"text-xs text-secondary-500 dark:text-secondary-400 px-1\"\n              aria-label={`${tasks.length - 3} more tasks`}\n            >\n              +{tasks.length - 3} more\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * Accessible task item component\n */\nexport const AccessibleTaskItem = ({\n  task,\n  index,\n  total,\n  isFocused = false,\n  onClick,\n  getTaskAriaLabel,\n  className = ''\n}) => {\n  const taskRef = React.useRef();\n  \n  React.useEffect(() => {\n    if (isFocused && taskRef.current) {\n      taskRef.current.focus();\n    }\n  }, [isFocused]);\n\n  const handleClick = (event) => {\n    event.stopPropagation();\n    onClick?.(task);\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault();\n      event.stopPropagation();\n      onClick?.(task);\n    }\n  };\n\n  const priorityColors = {\n    high: 'bg-red-500',\n    medium: 'bg-yellow-500', \n    low: 'bg-green-500'\n  };\n\n  return (\n    <div\n      ref={taskRef}\n      role=\"listitem\"\n      tabIndex={isFocused ? 0 : -1}\n      aria-label={getTaskAriaLabel?.(task, index, total)}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      className={`\n        accessible-task-item px-2 py-1 rounded text-xs cursor-pointer\n        transition-colors duration-150\n        ${priorityColors[task.priority] || 'bg-secondary-500'}\n        text-white hover:opacity-80\n        ${isFocused ? 'ring-2 ring-white ring-offset-1' : ''}\n        focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-1\n        ${className}\n      `}\n    >\n      <div className=\"truncate font-medium\">\n        {task.title}\n      </div>\n      \n      {/* Status indicator for screen readers */}\n      <span className=\"sr-only\">\n        Priority: {task.priority}, Status: {task.status}\n      </span>\n    </div>\n  );\n};\n\n/**\n * Accessible calendar grid component\n */\nexport const AccessibleCalendarGrid = ({\n  dates,\n  tasks,\n  currentMonth,\n  selectedDate,\n  focusedDate,\n  focusedTaskIndex,\n  onDateClick,\n  onTaskClick,\n  getDateAriaLabel,\n  getTaskAriaLabel,\n  className = ''\n}) => {\n  const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  \n  // Group dates into weeks\n  const weeks = [];\n  for (let i = 0; i < dates.length; i += 7) {\n    weeks.push(dates.slice(i, i + 7));\n  }\n\n  return (\n    <div className={`accessible-calendar-grid ${className}`}>\n      {/* Calendar Grid */}\n      <div \n        role=\"grid\"\n        aria-label=\"Calendar dates\"\n        className=\"border border-secondary-200 dark:border-secondary-700 rounded-lg overflow-hidden\"\n      >\n        {/* Header Row */}\n        <div role=\"row\" className=\"grid grid-cols-7 bg-secondary-50 dark:bg-secondary-900\">\n          {weekdays.map(day => (\n            <div\n              key={day}\n              role=\"columnheader\"\n              className=\"p-3 text-center text-sm font-medium text-secondary-600 dark:text-secondary-400 border-r border-secondary-200 dark:border-secondary-700 last:border-r-0\"\n            >\n              <span className=\"hidden sm:inline\">{day}</span>\n              <span className=\"sm:hidden\">{day.slice(0, 3)}</span>\n            </div>\n          ))}\n        </div>\n        \n        {/* Date Rows */}\n        {weeks.map((week, weekIndex) => (\n          <div key={weekIndex} role=\"row\" className=\"grid grid-cols-7\">\n            {week.map(date => {\n              const dateTasks = tasks.filter(task => \n                task.due && new Date(task.due).toDateString() === date.toDateString()\n              );\n              \n              return (\n                <AccessibleDateCell\n                  key={date.toISOString()}\n                  date={date}\n                  tasks={dateTasks}\n                  isSelected={selectedDate && date.toDateString() === selectedDate.toDateString()}\n                  isFocused={focusedDate && date.toDateString() === focusedDate.toDateString()}\n                  isToday={date.toDateString() === new Date().toDateString()}\n                  isCurrentMonth={date.getMonth() === currentMonth.getMonth()}\n                  onClick={onDateClick}\n                  onTaskClick={onTaskClick}\n                  getDateAriaLabel={getDateAriaLabel}\n                  getTaskAriaLabel={getTaskAriaLabel}\n                  focusedTaskIndex={focusedTaskIndex}\n                />\n              );\n            })}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default AccessibleCalendar;